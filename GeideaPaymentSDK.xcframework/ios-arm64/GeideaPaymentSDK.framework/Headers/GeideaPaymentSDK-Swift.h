#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.7.1 effective-4.1.50 (swiftlang-5.7.1.135.3 clang-1400.0.29.51)
#ifndef GEIDEAPAYMENTSDK_SWIFT_H
#define GEIDEAPAYMENTSDK_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wduplicate-method-match"
#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if defined(__cplusplus)
#if !defined(SWIFT_NOEXCEPT)
# define SWIFT_NOEXCEPT noexcept
#endif
#else
#if !defined(SWIFT_NOEXCEPT)
# define SWIFT_NOEXCEPT 
#endif
#endif
#if defined(__cplusplus)
#if !defined(SWIFT_CXX_INT_DEFINED)
#define SWIFT_CXX_INT_DEFINED
namespace swift {
using Int = ptrdiff_t;
using UInt = size_t;
}
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreFoundation;
@import Foundation;
@import ObjectiveC;
@import PassKit;
@import QuartzCore;
@import UIKit;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="GeideaPaymentSDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)

typedef SWIFT_ENUM(NSInteger, CardType, open) {
  CardTypeAmex = 0,
  CardTypeVisa = 1,
  CardTypeMasterCard = 2,
  CardTypeMada = 3,
  CardTypeMeeza = 4,
};

@class NSString;

SWIFT_CLASS("_TtC16GeideaPaymentSDK23ConfigCountriesResponse")
@interface ConfigCountriesResponse : NSObject
@property (nonatomic, copy) NSString * _Nullable key3;
@property (nonatomic, copy) NSString * _Nullable nameEn;
@property (nonatomic, copy) NSString * _Nullable nameAr;
@property (nonatomic, copy) NSString * _Nullable key2;
@property (nonatomic) BOOL isSupported;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, Environment, open) {
  EnvironmentDev = 0,
  EnvironmentTest = 1,
  EnvironmentPreprod = 2,
  EnvironmentProd = 3,
};


SWIFT_CLASS("_TtC16GeideaPaymentSDK9GDAddress")
@interface GDAddress : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithCountryCode:(NSString * _Nullable)countryCode andCity:(NSString * _Nullable)city andStreet:(NSString * _Nullable)street andPostCode:(NSString * _Nullable)postCode OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC16GeideaPaymentSDK8GDAmount")
@interface GDAmount : NSObject
- (nonnull instancetype)initWithAmount:(double)amount currency:(NSString * _Nonnull)currency OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

@class UIViewController;
@class UIView;

SWIFT_CLASS("_TtC16GeideaPaymentSDK17GDApplePayDetails")
@interface GDApplePayDetails : NSObject
- (nonnull instancetype)initIn:(UIViewController * _Nullable)hostViewController andButtonIn:(UIView * _Nullable)buttonView forMerchantIdentifier:(NSString * _Nonnull)merchantIdentifier andMerchantDisplayName:(NSString * _Nullable)merchantDisplayName requiredBillingContactFields:(NSSet<PKContactField> * _Nullable)requiredBillingContactFields requiredShippingContactFields:(NSSet<PKContactField> * _Nullable)requiredShippingContactFields paymentMethods:(NSArray<NSString *> * _Nullable)paymentMethods withCallbackUrl:(NSString * _Nullable)callBackUrl andReferenceId:(NSString * _Nullable)merchantRefId OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC16GeideaPaymentSDK18GDApplePayResponse")
@interface GDApplePayResponse : NSObject
@property (nonatomic, copy) NSString * _Nonnull responseCode;
@property (nonatomic, copy) NSString * _Nonnull responseMessage;
@property (nonatomic, copy) NSString * _Nonnull detailedResponseCode;
@property (nonatomic, copy) NSString * _Nonnull detailedResponseMessage;
@property (nonatomic, copy) NSString * _Nonnull orderId;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC16GeideaPaymentSDK31GDAuthenticationDetailsResponse")
@interface GDAuthenticationDetailsResponse : NSObject
@property (nonatomic, copy) NSString * _Nullable acsEci;
@property (nonatomic, copy) NSString * _Nullable paResStatus;
@property (nonatomic, copy) NSString * _Nullable proofXml;
@property (nonatomic, copy) NSString * _Nullable veResEnrolled;
@property (nonatomic, copy) NSString * _Nullable authenticationToken;
@property (nonatomic, copy) NSString * _Nullable xid;
@property (nonatomic, copy) NSString * _Nullable accountAuthenticationValue;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC16GeideaPaymentSDK13GDBNPLDetails")
@interface GDBNPLDetails : NSObject
@property (nonatomic, copy) NSString * _Nullable transactionId;
@property (nonatomic, copy) NSString * _Nullable bnplDetailId;
@property (nonatomic, copy) NSString * _Nullable updatedDate;
@property (nonatomic, copy) NSString * _Nullable createdDate;
@property (nonatomic, copy) NSString * _Nullable createdBy;
@property (nonatomic, copy) NSString * _Nullable updatedBy;
@property (nonatomic, copy) NSString * _Nullable provider;
@property (nonatomic, copy) NSString * _Nullable bnplOrderId;
@property (nonatomic, copy) NSString * _Nullable providerTransactionId;
@property (nonatomic, copy) NSString * _Nullable loanNumber;
@property (nonatomic, copy) NSString * _Nullable currency;
@property (nonatomic, copy) NSString * _Nullable firstInstallmentDate;
@property (nonatomic, copy) NSString * _Nullable lastInstallmentDate;
@property (nonatomic, copy) NSString * _Nullable providerResponseCode;
@property (nonatomic, copy) NSString * _Nullable providerResponseDescription;
@property (nonatomic, copy) NSString * _Nullable token;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC16GeideaPaymentSDK10GDBNPLItem")
@interface GDBNPLItem : NSObject
@property (nonatomic, copy) NSString * _Nullable merchantItemId;
@property (nonatomic, copy) NSString * _Nullable name;
@property (nonatomic, copy) NSString * _Nullable itemDescription;
@property (nonatomic, copy) NSArray<NSString *> * _Nullable categories;
@property (nonatomic) NSInteger count;
@property (nonatomic) double price;
@property (nonatomic, copy) NSString * _Nullable currency;
- (nonnull instancetype)initWithMerchantItemId:(NSString * _Nullable)merchantItemId name:(NSString * _Nullable)name itemDescription:(NSString * _Nullable)itemDescription categories:(NSArray<NSString *> * _Nullable)categories count:(NSInteger)count price:(double)price currency:(NSString * _Nullable)currency OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC16GeideaPaymentSDK21GDBNPLPurchaseDetails")
@interface GDBNPLPurchaseDetails : NSObject
- (nonnull instancetype)initWithCustomerIdentifier:(NSString * _Nullable)customerIdentifier orderId:(NSString * _Nullable)orderId bnplOrderId:(NSString * _Nullable)bnplOrderId otp:(NSString * _Nullable)otp totalAmount:(double)totalAmount currency:(NSString * _Nullable)currency downPayment:(double)downPayment giftCardAmount:(double)giftCardAmount campaignAmount:(double)campaignAmount tenure:(NSInteger)tenure adminFees:(double)adminFees OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC16GeideaPaymentSDK22GDBNPLPurchaseResponse")
@interface GDBNPLPurchaseResponse : NSObject
@property (nonatomic, copy) NSString * _Nullable detailedResponseMessage;
@property (nonatomic, copy) NSString * _Nullable detailedResponseCode;
@property (nonatomic, copy) NSString * _Nullable responseMessage;
@property (nonatomic, copy) NSString * _Nullable responseCode;
@property (nonatomic, copy) NSString * _Nullable language;
@property (nonatomic, copy) NSString * _Nullable bnplOrderId;
@property (nonatomic, copy) NSString * _Nullable providerTransactionId;
@property (nonatomic, copy) NSString * _Nullable orderId;
@property (nonatomic, copy) NSString * _Nullable loanNumber;
@property (nonatomic, copy) NSString * _Nullable firstInstallmentDate;
@property (nonatomic, copy) NSString * _Nullable lastinstallmentDate;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC16GeideaPaymentSDK21GDBNPLReceiptResponse")
@interface GDBNPLReceiptResponse : NSObject
@property (nonatomic, copy) NSString * _Nullable provider;
@property (nonatomic, copy) NSString * _Nullable bnplOrderId;
@property (nonatomic, copy) NSString * _Nullable providerTransactionId;
@property (nonatomic, copy) NSString * _Nullable currency;
@property (nonatomic, copy) NSString * _Nullable loanNumber;
@property (nonatomic, copy) NSString * _Nullable firstInstallmentDate;
@property (nonatomic, copy) NSString * _Nullable lastinstallmentDate;
@property (nonatomic, copy) NSString * _Nullable providerResponseCode;
@property (nonatomic, copy) NSString * _Nullable providerResponseDescription;
@property (nonatomic, copy) NSString * _Nullable bnplDetailId;
@property (nonatomic, copy) NSString * _Nullable applicationId;
@property (nonatomic, copy) NSString * _Nullable applicationCreated;
@property (nonatomic, copy) NSString * _Nullable borrowerName;
@property (nonatomic, copy) NSString * _Nullable borrowerNationalId;
@property (nonatomic, copy) NSString * _Nullable borrowerAddress;
@property (nonatomic, copy) NSString * _Nullable orderCreated;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC16GeideaPaymentSDK14GDBNPLResponse")
@interface GDBNPLResponse : NSObject
@property (nonatomic, copy) NSString * _Nullable detailedResponseMessage;
@property (nonatomic, copy) NSString * _Nullable detailedResponseCode;
@property (nonatomic, copy) NSString * _Nullable responseMessage;
@property (nonatomic, copy) NSString * _Nullable responseCode;
@property (nonatomic, copy) NSString * _Nullable bnplOrderId;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC16GeideaPaymentSDK18GDBrandingResponse")
@interface GDBrandingResponse : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC16GeideaPaymentSDK16GDCancelResponse")
@interface GDCancelResponse : NSObject
@property (nonatomic, copy) NSString * _Nullable orderId;
@property (nonatomic, copy) NSString * _Nullable responseCode;
@property (nonatomic, copy) NSString * _Nullable responseMessage;
@property (nonatomic, copy) NSString * _Nullable detailedResponseMessage;
@property (nonatomic, copy) NSString * _Nullable detailedResponseCode;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC16GeideaPaymentSDK25GDCardBrandAuthentication")
@interface GDCardBrandAuthentication : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC16GeideaPaymentSDK19GDCardBrandProvider")
@interface GDCardBrandProvider : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC16GeideaPaymentSDK13GDCardDetails")
@interface GDCardDetails : NSObject
- (nonnull instancetype)initWithCardholderName:(NSString * _Nonnull)cardholderName andCardNumber:(NSString * _Nonnull)cardNumber andCVV:(NSString * _Nonnull)cvv andExpiryMonth:(NSInteger)expiryMonth andExpiryYear:(NSInteger)expiryYear OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC16GeideaPaymentSDK16GDCashOnDelivery")
@interface GDCashOnDelivery : NSObject
@property (nonatomic, copy) NSString * _Nullable orderId;
- (nonnull instancetype)initWithOrderId:(NSString * _Nullable)orderId OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC16GeideaPaymentSDK16GDConfigApplePay")
@interface GDConfigApplePay : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC16GeideaPaymentSDK16GDConfigResponse")
@interface GDConfigResponse : NSObject
@property (nonatomic) NSInteger hppDefaultTimeout;
@property (nonatomic, copy) NSArray<ConfigCountriesResponse *> * _Nullable countries;
@property (nonatomic) BOOL isTokenizationEnabled;
@property (nonatomic) BOOL isCallbackEnabled;
@property (nonatomic) BOOL isPaymentMethodSelectionEnabled;
@property (nonatomic) BOOL isTransactionReceiptEnabled;
@property (nonatomic) BOOL isValuBnplEnabled;
@property (nonatomic) BOOL isShahryCnpBnplEnabled;
@property (nonatomic) BOOL isShahryCpBnplEnabled;
@property (nonatomic) BOOL isSouhoolaCnpBnplEnabled;
@property (nonatomic) BOOL isMeezaQrEnabled;
@property (nonatomic) BOOL useMpgsApiV60;
@property (nonatomic, copy) NSString * _Nullable merchantNotificationEmail;
@property (nonatomic, copy) NSString * _Nullable detailedResponseMessage;
@property (nonatomic, copy) NSString * _Nullable detailedResponseCode;
@property (nonatomic, copy) NSString * _Nullable responseMessage;
@property (nonatomic, copy) NSString * _Nullable responseCode;
@property (nonatomic, copy) NSString * _Nullable language;
@property (nonatomic, copy) NSString * _Nullable merchantName;
@property (nonatomic, copy) NSString * _Nullable merchantNameAr;
@property (nonatomic, copy) NSString * _Nullable merchantLogoUrl;
@property (nonatomic, copy) NSString * _Nullable merchantCountryTwoLetterCode;
@property (nonatomic, copy) NSString * _Nullable name;
@property (nonatomic, strong) GDConfigApplePay * _Nullable applePay;
@property (nonatomic, copy) NSArray<NSString *> * _Nullable paymentMethods;
@property (nonatomic, copy) NSArray<NSString *> * _Nullable currencies;
@property (nonatomic, copy) NSArray<NSString *> * _Nullable allowedInitiatedByValues;
@property (nonatomic, copy) NSArray<GDCardBrandAuthentication *> * _Nullable cardBrandAuthentications;
@property (nonatomic) BOOL allowCashOnDeliveryShahry;
@property (nonatomic) BOOL allowCashOnDeliverySouhoola;
@property (nonatomic) BOOL allowCashOnDeliveryValu;
@property (nonatomic) BOOL is3dsRequiredForTokenPayments;
@property (nonatomic) BOOL isCvvRequiredForTokenPayments;
@property (nonatomic, strong) GDBrandingResponse * _Nullable branding;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

enum PaymentOperation : NSInteger;

SWIFT_CLASS("_TtC16GeideaPaymentSDK17GDCustomerDetails")
@interface GDCustomerDetails : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithEmail:(NSString * _Nullable)email andCallbackUrl:(NSString * _Nullable)callbackUrl merchantReferenceId:(NSString * _Nullable)merchantReferenceId shippingAddress:(GDAddress * _Nullable)shippingAddress billingAddress:(GDAddress * _Nullable)billingAddress paymentOperation:(enum PaymentOperation)paymentOperation OBJC_DESIGNATED_INITIALIZER;
@end

@class GDEInvoiceItem;

SWIFT_CLASS("_TtC16GeideaPaymentSDK17GDEInvoiceDetails")
@interface GDEInvoiceDetails : NSObject
@property (nonatomic) BOOL collectCustomersBillingShippingAddress;
@property (nonatomic) BOOL preAuthorizeAmount;
@property (nonatomic) double subtotal;
@property (nonatomic) double grandTotal;
@property (nonatomic) double extraCharges;
@property (nonatomic, copy) NSString * _Nullable extraChargesType;
@property (nonatomic, copy) NSString * _Nullable chargeDescription;
@property (nonatomic, copy) NSString * _Nullable paymentIntentReference;
@property (nonatomic) double invoiceDiscount;
@property (nonatomic, copy) NSString * _Nullable invoiceDiscountType;
@property (nonatomic, copy) NSString * _Nullable merchantReferenceId;
@property (nonatomic, copy) NSArray<GDEInvoiceItem *> * _Nullable eInvoiceItems;
- (nonnull instancetype)initWithCollectCustomersBillingShippingAddress:(BOOL)collectCustomersBillingShippingAddress preAuthorizeAmount:(BOOL)preAuthorizeAmount subTotal:(double)subTotal grandTotal:(double)grandTotal extraCharges:(double)extraCharges extraChargesType:(NSString * _Nullable)extraChargesType chargeDescription:(NSString * _Nullable)chargeDescription paymentIntentReference:(NSString * _Nullable)paymentIntentReference invoiceDiscount:(double)invoiceDiscount invoiceDiscountType:(NSString * _Nullable)invoiceDiscountType eInvoiceItems:(NSArray<GDEInvoiceItem *> * _Nullable)eInvoiceItems OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC16GeideaPaymentSDK14GDEInvoiceItem")
@interface GDEInvoiceItem : NSObject
@property (nonatomic) double total;
@property (nonatomic) double tax;
@property (nonatomic, copy) NSString * _Nullable taxType;
@property (nonatomic) double price;
@property (nonatomic) NSInteger quantity;
@property (nonatomic) double itemDiscount;
@property (nonatomic, copy) NSString * _Nullable itemDiscountType;
@property (nonatomic, copy) NSString * _Nullable itemDescription;
@property (nonatomic, copy) NSString * _Nullable sku;
- (nonnull instancetype)initWithTotal:(double)total tax:(double)tax taxType:(NSString * _Nullable)taxType price:(double)price quantity:(NSInteger)quantity itemDiscount:(double)itemDiscount itemDiscountType:(NSString * _Nullable)itemDiscountType description:(NSString * _Nullable)description sku:(NSString * _Nullable)sku OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC16GeideaPaymentSDK18GDEInvoiceSentLink")
@interface GDEInvoiceSentLink : NSObject
@property (nonatomic, copy) NSString * _Nullable sentDate;
@property (nonatomic, copy) NSString * _Nullable channel;
@property (nonatomic, copy) NSString * _Nullable recipient;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC16GeideaPaymentSDK15GDErrorResponse")
@interface GDErrorResponse : NSObject
@property (nonatomic, copy) NSDictionary<NSString *, NSArray<NSString *> *> * _Nonnull errors;
@property (nonatomic) NSInteger status;
@property (nonatomic, copy) NSString * _Nonnull title;
@property (nonatomic, copy) NSString * _Nonnull traceId;
@property (nonatomic, copy) NSString * _Nonnull type;
@property (nonatomic, copy) NSString * _Nonnull responseCode;
@property (nonatomic, copy) NSString * _Nonnull responseMessage;
@property (nonatomic, copy) NSString * _Nonnull detailedResponseCode;
@property (nonatomic, copy) NSString * _Nonnull detailedResponseMessage;
@property (nonatomic, copy) NSString * _Nonnull responseDescription;
@property (nonatomic, copy) NSString * _Nonnull orderId;
@property (nonatomic, copy) NSString * _Nonnull correlationId;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC16GeideaPaymentSDK12GDExpiryDate")
@interface GDExpiryDate : NSObject
@property (nonatomic) NSInteger month;
@property (nonatomic) NSInteger year;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC16GeideaPaymentSDK18GDGetTokenResponse")
@interface GDGetTokenResponse : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC16GeideaPaymentSDK25GDInitializeReponseObject")
@interface GDInitializeReponseObject : NSObject
- (nonnull instancetype)initWithGatewayDecision:(NSString * _Nonnull)gatewayDecision threedSecureId:(NSString * _Nonnull)threedSecureId OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC16GeideaPaymentSDK30GDInitiateAuthenticateResponse")
@interface GDInitiateAuthenticateResponse : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC16GeideaPaymentSDK17GDInstallmentPlan")
@interface GDInstallmentPlan : NSObject
@property (nonatomic) NSInteger tenorMonth;
@property (nonatomic) double installmentAmount;
@property (nonatomic) double adminFees;
@property (nonatomic) double downPayment;
@property (nonatomic, copy) NSString * _Nullable rate;
@property (nonatomic, copy) NSString * _Nullable promoCode;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC16GeideaPaymentSDK24GDInstallmentPlanDetails")
@interface GDInstallmentPlanDetails : NSObject
- (nonnull instancetype)initWithCustomerIdentifier:(NSString * _Nullable)customerIdentifier totalAmount:(double)totalAmount currency:(NSString * _Nullable)currency downPayment:(double)downPayment giftCardAmount:(double)giftCardAmount campaignAmount:(double)campaignAmount adminFees:(double)adminFees OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC16GeideaPaymentSDK33GDInstallmentPlanSelectedResponse")
@interface GDInstallmentPlanSelectedResponse : NSObject
@property (nonatomic, copy) NSString * _Nullable detailedResponseMessage;
@property (nonatomic, copy) NSString * _Nullable detailedResponseCode;
@property (nonatomic, copy) NSString * _Nullable responseMessage;
@property (nonatomic, copy) NSString * _Nullable responseCode;
@property (nonatomic, copy) NSString * _Nullable orderId;
@property (nonatomic, copy) NSString * _Nullable nextStep;
@property (nonatomic, copy) NSString * _Nullable language;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC16GeideaPaymentSDK26GDInstallmentPlansResponse")
@interface GDInstallmentPlansResponse : NSObject
@property (nonatomic, copy) NSString * _Nullable detailedResponseMessage;
@property (nonatomic, copy) NSString * _Nullable detailedResponseCode;
@property (nonatomic, copy) NSString * _Nullable responseMessage;
@property (nonatomic, copy) NSString * _Nullable responseCode;
@property (nonatomic, copy) NSString * _Nullable language;
@property (nonatomic, copy) NSString * _Nullable currency;
@property (nonatomic, copy) NSString * _Nullable bnplOrderId;
@property (nonatomic) double minimumDownPayment;
@property (nonatomic) double totalAmount;
@property (nonatomic) double financedAmount;
@property (nonatomic) double giftCardAmount;
@property (nonatomic) double campaignAmount;
@property (nonatomic, copy) NSArray<GDInstallmentPlan *> * _Nullable installmentPlans;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC16GeideaPaymentSDK14GDMeezaDetails")
@interface GDMeezaDetails : NSObject
@property (nonatomic, copy) NSString * _Nullable transactionId;
@property (nonatomic, copy) NSString * _Nullable meezaTransactionId;
@property (nonatomic, copy) NSString * _Nullable type;
@property (nonatomic, copy) NSString * _Nullable transactionTimeStamp;
@property (nonatomic, copy) NSString * _Nullable adviceId;
@property (nonatomic, copy) NSString * _Nullable senderId;
@property (nonatomic, copy) NSString * _Nullable senderName;
@property (nonatomic, copy) NSString * _Nullable senderAddress;
@property (nonatomic, copy) NSString * _Nullable receiverId;
@property (nonatomic, copy) NSString * _Nullable receiverName;
@property (nonatomic, copy) NSString * _Nullable receiverAddress;
@property (nonatomic) double amount;
@property (nonatomic, copy) NSString * _Nullable currency;
@property (nonatomic, copy) NSString * _Nullable responseCode;
@property (nonatomic, copy) NSString * _Nullable responseDescription;
@property (nonatomic) double interchange;
@property (nonatomic, copy) NSString * _Nullable interchangeAction;
@property (nonatomic, copy) NSString * _Nullable reference1;
@property (nonatomic, copy) NSString * _Nullable reference2;
@property (nonatomic) double tips;
@property (nonatomic) double convenienceFee;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC16GeideaPaymentSDK10GDMerchant")
@interface GDMerchant : NSObject
@property (nonatomic, copy) NSString * _Nullable referenceId;
@property (nonatomic, copy) NSString * _Nullable name;
@property (nonatomic, copy) NSString * _Nullable nameAr;
@property (nonatomic, copy) NSString * _Nullable vatNumber;
@property (nonatomic, copy) NSString * _Nullable vatNumberAr;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC16GeideaPaymentSDK24GDMerchantConfigResponse")
@interface GDMerchantConfigResponse : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC16GeideaPaymentSDK22GDMerchantDataResponse")
@interface GDMerchantDataResponse : NSObject
@property (nonatomic, copy) NSString * _Nullable merchantDomain;
@property (nonatomic, copy) NSString * _Nullable merchantLogoUrl;
@property (nonatomic) BOOL isTest;
@property (nonatomic, copy) NSString * _Nullable applePaymentProcessingCertificateExpiryDateNew;
@property (nonatomic, copy) NSString * _Nullable applePaymentProcessingCertificate;
@property (nonatomic, copy) NSString * _Nullable merchantName;
@property (nonatomic) BOOL isApplePayMobileEnabled;
@property (nonatomic, copy) NSString * _Nullable merchantNotificationEmail;
@property (nonatomic, copy) NSString * _Nullable merchantGatewayKey;
@property (nonatomic, copy) NSString * _Nullable cyberSourceSharedSecretKey;
@property (nonatomic, copy) NSString * _Nullable gsdkMid;
@property (nonatomic, copy) NSString * _Nullable applePaymentProcessingCertificateNew;
@property (nonatomic, copy) NSString * _Nullable applePartnerInternalMerchantIdentifier;
@property (nonatomic, copy) NSString * _Nullable cyberSourceMerchantId;
@property (nonatomic, copy) NSString * _Nullable appleDeveloperId;
@property (nonatomic, copy) NSString * _Nullable applePaymentProcessingCertificateExpiryDate;
@property (nonatomic, copy) NSString * _Nullable cyberSourceApiIdentifier;
@property (nonatomic, copy) NSString * _Nullable appleCertificatePrivateKey;
@property (nonatomic, copy) NSString * _Nullable merchantCountry;
@property (nonatomic, copy) NSString * _Nullable cyberSourceOrgUnitId;
@property (nonatomic, copy) NSString * _Nullable mpgsMsoProvider;
@property (nonatomic, copy) NSString * _Nullable gsdkSecretKey;
@property (nonatomic, copy) NSString * _Nullable mpgsMerchantId;
@property (nonatomic, copy) NSString * _Nullable customerNotificationFromEmail;
@property (nonatomic) BOOL isTokenizationEnabled;
@property (nonatomic, copy) NSString * _Nullable defaultPaymentOperation;
@property (nonatomic, copy) NSArray<NSString *> * _Nullable allowedInitiatedByValues;
@property (nonatomic) BOOL isApplePayWebEnabled;
@property (nonatomic, copy) NSArray<GDCardBrandProvider *> * _Nullable cardBrandProviders;
@property (nonatomic) BOOL isCallbackEnabled;
@property (nonatomic) BOOL customerPaymentNotification;
@property (nonatomic) BOOL isApplePayMobileCertificateAvailable;
@property (nonatomic, copy) NSString * _Nullable merchantNameAr;
@property (nonatomic, copy) NSString * _Nullable appleCsr;
@property (nonatomic, copy) NSString * _Nullable cyberSourceMerchantKeyId;
@property (nonatomic) BOOL isPaymentMethodSelectionEnabled;
@property (nonatomic, copy) NSString * _Nullable apiPassword;
@property (nonatomic, copy) NSString * _Nullable appleCertificatePrivateKeyNew;
@property (nonatomic, copy) NSArray<NSString *> * _Nullable currencies;
@property (nonatomic, copy) NSString * _Nullable mpgsApiKey;
@property (nonatomic) BOOL isTransactionReceiptEnabled;
@property (nonatomic, copy) NSString * _Nullable merchantWebsite;
@property (nonatomic, copy) NSString * _Nullable gsdkTid;
@property (nonatomic, copy) NSString * _Nullable cyberSourceApiKey;
@property (nonatomic, copy) NSString * _Nullable callbackUrl;
@property (nonatomic) BOOL isMeezaDigitalEnabled;
@property (nonatomic) BOOL useMpgsApiV60;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC16GeideaPaymentSDK15GDMultiCurrency")
@interface GDMultiCurrency : NSObject
@property (nonatomic, copy) NSString * _Nullable authCurrency;
@property (nonatomic, copy) NSString * _Nullable settleCurrency;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

@class GDPaymentMethodResponse;
@class GDPaymentIntent;
@class GDPlatform;
@class GDTransactionResponse;
@class GDStatementDescriptor;

SWIFT_CLASS("_TtC16GeideaPaymentSDK15GDOrderResponse")
@interface GDOrderResponse : NSObject
@property (nonatomic, copy) NSString * _Nullable createdDate;
@property (nonatomic, copy) NSString * _Nullable createdBy;
@property (nonatomic, copy) NSString * _Nullable updatedDate;
@property (nonatomic, copy) NSString * _Nullable updatedBy;
@property (nonatomic, copy) NSString * _Nullable orderId;
@property (nonatomic) double amount;
@property (nonatomic, copy) NSString * _Nullable currency;
@property (nonatomic, copy) NSString * _Nullable language;
@property (nonatomic, copy) NSString * _Nullable detailedStatus;
@property (nonatomic, copy) NSString * _Nullable status;
@property (nonatomic, copy) NSString * _Nullable threeDSecureId;
@property (nonatomic, copy) NSString * _Nullable merchantId;
@property (nonatomic, copy) NSString * _Nullable merchantPublicKey;
@property (nonatomic, copy) NSString * _Nullable merchantName;
@property (nonatomic, copy) NSString * _Nullable parentOrderId;
@property (nonatomic, strong) GDMultiCurrency * _Nullable multiCurrency;
@property (nonatomic, copy) NSString * _Nullable merchantReferenceId;
@property (nonatomic, copy) NSString * _Nullable callbackUrl;
@property (nonatomic, copy) NSString * _Nullable customerEmail;
@property (nonatomic, strong) GDAddress * _Nullable billingAddress;
@property (nonatomic, strong) GDAddress * _Nullable shippingAddress;
@property (nonatomic, copy) NSString * _Nullable returnUrl;
@property (nonatomic) BOOL cardOnFile;
@property (nonatomic, copy) NSString * _Nullable tokenId;
@property (nonatomic, copy) NSString * _Nullable initiatedBy;
@property (nonatomic, copy) NSString * _Nullable agreementId;
@property (nonatomic, copy) NSString * _Nullable agreementType;
@property (nonatomic, copy) NSString * _Nullable paymentOperation;
@property (nonatomic, copy) NSString * _Nullable custom;
@property (nonatomic, strong) GDPaymentMethodResponse * _Nullable paymentMethod;
@property (nonatomic) double tipAmount;
@property (nonatomic) double totalAmount;
@property (nonatomic) double settleAmount;
@property (nonatomic) double totalAuthorizedAmount;
@property (nonatomic) double totalCapturedAmount;
@property (nonatomic) double totalRefundedAmount;
@property (nonatomic, strong) GDPaymentIntent * _Nullable paymentIntent;
@property (nonatomic) BOOL isTokenPayment;
@property (nonatomic) BOOL restrictPaymentMethods;
@property (nonatomic, strong) GDPlatform * _Nullable platform;
@property (nonatomic, copy) NSArray<GDTransactionResponse *> * _Nullable transactions;
@property (nonatomic, strong) GDStatementDescriptor * _Nullable statementDescriptor;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC16GeideaPaymentSDK14GDOrdersFilter")
@interface GDOrdersFilter : NSObject
@property (nonatomic, copy) NSArray<NSString *> * _Nullable DetailedStatuses;
@property (nonatomic, copy) NSString * _Nullable Status;
@property (nonatomic, copy) NSString * _Nullable UpdatedDate;
@property (nonatomic, copy) NSString * _Nullable FromDate;
@property (nonatomic, copy) NSString * _Nullable ToDate;
@property (nonatomic) NSInteger Skip;
@property (nonatomic) NSInteger Take;
- (nonnull instancetype)initWithStatus:(NSString * _Nullable)status andDetailedStatuses:(NSArray<NSString *> * _Nullable)detailedStatuses andUpdatedDate:(NSString * _Nullable)updatedDate from:(NSString * _Nullable)fromDate to:(NSString * _Nullable)toDate skip:(NSInteger)skip take:(NSInteger)take OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC16GeideaPaymentSDK16GDOrdersResponse")
@interface GDOrdersResponse : NSObject
@property (nonatomic, copy) NSArray<GDOrderResponse *> * _Nullable orders;
@property (nonatomic) NSInteger totalCount;
@property (nonatomic, copy) NSString * _Nullable detailedResponseMessage;
@property (nonatomic, copy) NSString * _Nullable detailedResponseCode;
@property (nonatomic, copy) NSString * _Nullable responseMessage;
@property (nonatomic, copy) NSString * _Nullable responseCode;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC16GeideaPaymentSDK12GDPICustomer")
@interface GDPICustomer : NSObject
- (nonnull instancetype)initWithPhoneNumber:(NSString * _Nullable)phoneNumber andPhoneCountryCode:(NSString * _Nullable)phoneCountryCode andEmail:(NSString * _Nullable)email name:(NSString * _Nullable)name OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC16GeideaPaymentSDK15GDPaymentIntent")
@interface GDPaymentIntent : NSObject
@property (nonatomic, copy) NSString * _Nullable id;
@property (nonatomic, copy) NSString * _Nullable type;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC16GeideaPaymentSDK23GDPaymentIntentCustomer")
@interface GDPaymentIntentCustomer : NSObject
@property (nonatomic, copy) NSString * _Nullable email;
@property (nonatomic, copy) NSString * _Nullable phone;
@property (nonatomic, copy) NSString * _Nullable name;
@property (nonatomic, copy) NSString * _Nullable customerId;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class NSDate;

SWIFT_CLASS("_TtC16GeideaPaymentSDK22GDPaymentIntentDetails")
@interface GDPaymentIntentDetails : NSObject
- (nonnull instancetype)initWithAmount:(GDAmount * _Nonnull)amount andExpiryDate:(NSDate * _Nullable)expiryDate andActivationDate:(NSDate * _Nullable)activationDate andCustomer:(GDPICustomer * _Nonnull)customer andEInvoiceDetails:(GDEInvoiceDetails * _Nullable)eInvoiceDetails paymentIntentId:(NSString * _Nullable)paymentIntentId status:(NSString * _Nullable)status type:(NSString * _Nullable)type OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

@class GDPaymentIntentOrder;

SWIFT_CLASS("_TtC16GeideaPaymentSDK30GDPaymentIntentDetailsResponse")
@interface GDPaymentIntentDetailsResponse : NSObject
@property (nonatomic, strong) GDPaymentIntentCustomer * _Nullable customer;
@property (nonatomic, copy) NSString * _Nullable link;
@property (nonatomic, copy) NSString * _Nullable merchantId;
@property (nonatomic, copy) NSString * _Nullable createdDate;
@property (nonatomic, copy) NSString * _Nullable updatedDate;
@property (nonatomic, copy) NSString * _Nullable type;
@property (nonatomic, copy) NSString * _Nullable expiryDate;
@property (nonatomic, copy) NSString * _Nullable activationDate;
@property (nonatomic, copy) NSString * _Nullable createdBy;
@property (nonatomic, copy) NSString * _Nullable merchantName;
@property (nonatomic, copy) NSArray<GDPaymentIntentOrder *> * _Nullable orders;
@property (nonatomic) BOOL isPending;
@property (nonatomic, copy) NSString * _Nullable number;
@property (nonatomic, strong) GDEInvoiceDetails * _Nullable eInvoiceDetails;
@property (nonatomic, copy) NSArray<GDEInvoiceSentLink *> * _Nullable eInvoiceSentLinks;
@property (nonatomic, copy) NSString * _Nullable updatedBy;
@property (nonatomic, copy) NSString * _Nullable paymentIntentId;
@property (nonatomic, copy) NSString * _Nullable currency;
@property (nonatomic, copy) NSString * _Nullable status;
@property (nonatomic, copy) NSString * _Nullable merchantPublicKey;
@end


SWIFT_CLASS("_TtC16GeideaPaymentSDK21GDPaymentIntentFilter")
@interface GDPaymentIntentFilter : NSObject
@property (nonatomic, copy) NSString * _Nullable fromDate;
@property (nonatomic, copy) NSString * _Nullable toDate;
@property (nonatomic) NSInteger take;
- (nonnull instancetype)initFrom:(NSString * _Nullable)fromDate to:(NSString * _Nullable)toDate take:(NSInteger)take OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC16GeideaPaymentSDK20GDPaymentIntentOrder")
@interface GDPaymentIntentOrder : NSObject
@property (nonatomic, copy) NSString * _Nullable paymentIntentId;
@property (nonatomic, copy) NSString * _Nullable createdDate;
@property (nonatomic, copy) NSString * _Nullable orderId;
@property (nonatomic, copy) NSString * _Nullable orderStatus;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC16GeideaPaymentSDK23GDPaymentIntentResponse")
@interface GDPaymentIntentResponse : NSObject
@property (nonatomic, strong) GDPaymentIntentDetailsResponse * _Nullable paymentIntent;
@property (nonatomic, copy) NSString * _Nullable responseMessage;
@property (nonatomic, copy) NSString * _Nullable detailedResponseMessage;
@property (nonatomic, copy) NSString * _Nullable responseCode;
@property (nonatomic, copy) NSString * _Nullable detailedResponseCode;
@property (nonatomic, copy) NSString * _Nullable language;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC16GeideaPaymentSDK24GDPaymentIntentsResponse")
@interface GDPaymentIntentsResponse : NSObject
@property (nonatomic, copy) NSArray<GDPaymentIntentDetailsResponse *> * _Nullable paymentIntents;
@property (nonatomic, copy) NSString * _Nullable responseMessage;
@property (nonatomic, copy) NSString * _Nullable detailedResponseMessage;
@property (nonatomic, copy) NSString * _Nullable responseCode;
@property (nonatomic, copy) NSString * _Nullable detailedResponseCode;
@property (nonatomic, copy) NSString * _Nullable language;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC16GeideaPaymentSDK23GDPaymentMethodResponse")
@interface GDPaymentMethodResponse : NSObject
@property (nonatomic, copy) NSString * _Nullable type;
@property (nonatomic, copy) NSString * _Nullable brand;
@property (nonatomic, copy) NSString * _Nullable cardholderName;
@property (nonatomic, copy) NSString * _Nullable maskedCardNumber;
@property (nonatomic, copy) NSString * _Nullable wallet;
@property (nonatomic, copy) NSString * _Nullable meezaTransactionId;
@property (nonatomic, copy) NSString * _Nullable meezaSenderId;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC16GeideaPaymentSDK24GDPaymentSelectionMetods")
@interface GDPaymentSelectionMetods : NSObject
- (nonnull instancetype)initWithLabel:(NSString * _Nonnull)label paymentMethods:(NSArray<NSString *> * _Nonnull)paymentMethods OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC16GeideaPaymentSDK10GDPlatform")
@interface GDPlatform : NSObject
@property (nonatomic, copy) NSString * _Nullable integrationType;
@property (nonatomic, copy) NSString * _Nullable name;
@property (nonatomic, copy) NSString * _Nullable version;
@property (nonatomic, copy) NSString * _Nullable pluginVersion;
@property (nonatomic, copy) NSString * _Nullable partnerId;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC16GeideaPaymentSDK18GDPostilionDetails")
@interface GDPostilionDetails : NSObject
@property (nonatomic) NSInteger stan;
@property (nonatomic, copy) NSString * _Nullable switchKey;
@property (nonatomic, copy) NSString * _Nullable originalKey;
@end


SWIFT_CLASS("_TtC16GeideaPaymentSDK16GDProductMConfig")
@interface GDProductMConfig : NSObject
- (nonnull instancetype)initWithMerchantId:(NSString * _Nullable)merchantId andStoreId:(NSString * _Nullable)storeId isTest:(BOOL)isTest OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC16GeideaPaymentSDK11GDQRDetails")
@interface GDQRDetails : NSObject
- (nonnull instancetype)initWithPhoneNumber:(NSString * _Nullable)phoneNumber email:(NSString * _Nullable)email name:(NSString * _Nullable)name expiryDate:(NSString * _Nullable)expiryDate OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC16GeideaPaymentSDK12GDQRResponse")
@interface GDQRResponse : NSObject
@property (nonatomic, copy) NSString * _Nullable paymentIntentId;
@property (nonatomic, copy) NSString * _Nullable message;
@property (nonatomic, copy) NSString * _Nullable image;
@property (nonatomic, copy) NSString * _Nullable type;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC16GeideaPaymentSDK15GDRTPQRResponse")
@interface GDRTPQRResponse : NSObject
@property (nonatomic, copy) NSString * _Nullable responseDescription;
@property (nonatomic, copy) NSString * _Nullable receiverName;
@property (nonatomic, copy) NSString * _Nullable receiverAddress;
@property (nonatomic, copy) NSString * _Nullable responseCode;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC16GeideaPaymentSDK9GDReceipt")
@interface GDReceipt : NSObject
@property (nonatomic, copy) NSString * _Nullable orderId;
@property (nonatomic, copy) NSString * _Nullable paymentDate;
@property (nonatomic) double amount;
@property (nonatomic, copy) NSString * _Nullable currency;
@property (nonatomic, copy) NSString * _Nullable customerEmail;
@property (nonatomic, copy) NSString * _Nullable paymentIntentType;
@property (nonatomic, copy) NSString * _Nullable paymentIntentNumber;
@property (nonatomic, copy) NSString * _Nullable paymentOperation;
@property (nonatomic, strong) GDPaymentMethodResponse * _Nullable paymentMethod;
@property (nonatomic, strong) GDMerchant * _Nullable merchant;
@property (nonatomic, strong) GDPICustomer * _Nullable eInvoiceCustomer;
@property (nonatomic, strong) GDEInvoiceDetails * _Nullable eInvoice;
@property (nonatomic, strong) GDBNPLReceiptResponse * _Nullable bnplDetails;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC16GeideaPaymentSDK17GDReceiptResponse")
@interface GDReceiptResponse : NSObject
@property (nonatomic, copy) NSString * _Nullable responseMessage;
@property (nonatomic, copy) NSString * _Nullable detailedResponseMessage;
@property (nonatomic, copy) NSString * _Nullable responseCode;
@property (nonatomic, copy) NSString * _Nullable detailedResponseCode;
@property (nonatomic, copy) NSString * _Nullable language;
@property (nonatomic, strong) GDReceipt * _Nullable receipt;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC16GeideaPaymentSDK12GDRecurrence")
@interface GDRecurrence : NSObject
@property (nonatomic) double amount;
@property (nonatomic, copy) NSString * _Nullable cycleInterval;
@property (nonatomic) NSInteger frequency;
@property (nonatomic, copy) NSString * _Nullable startDate;
@property (nonatomic, copy) NSString * _Nullable endDate;
@property (nonatomic) NSInteger numberOfPayments;
@property (nonatomic) NSInteger minimumDaysBetweenPayments;
@property (nonatomic, copy) NSString * _Nullable recurrenceDescription;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC16GeideaPaymentSDK19GDSDKMerchantConfig")
@interface GDSDKMerchantConfig : NSObject
- (nonnull instancetype)initWithToken:(NSString * _Nullable)token andCountryHeader:(NSString * _Nullable)countryHeader params:(GDProductMConfig * _Nullable)params OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC16GeideaPaymentSDK27GDSDKMerchantConfigResponse")
@interface GDSDKMerchantConfigResponse : NSObject
@property (nonatomic, copy) NSString * _Nullable merchantId;
@property (nonatomic, copy) NSString * _Nullable storeId;
@property (nonatomic, strong) GDMerchantDataResponse * _Nullable data;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC16GeideaPaymentSDK25GDSendLinkMultipleDetails")
@interface GDSendLinkMultipleDetails : NSObject
- (nonnull instancetype)initWithPaymentIntentId:(NSArray<NSString *> * _Nullable)paymentIntentIds sendingChannels:(NSArray<NSString *> * _Nullable)sendingChannels OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC16GeideaPaymentSDK15GDShahryConfirm")
@interface GDShahryConfirm : NSObject
@property (nonatomic, copy) NSString * _Nullable orderId;
@property (nonatomic, copy) NSString * _Nullable orderToken;
- (nonnull instancetype)initWithOrderId:(NSString * _Nullable)orderId orderToken:(NSString * _Nullable)orderToken OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC16GeideaPaymentSDK29GDShahrySelectPlanInstallment")
@interface GDShahrySelectPlanInstallment : NSObject
@property (nonatomic, copy) NSString * _Nullable customerIdentifier;
@property (nonatomic) double totalAmount;
@property (nonatomic, copy) NSString * _Nullable currency;
@property (nonatomic, copy) NSString * _Nullable merchantReferenceId;
@property (nonatomic, copy) NSString * _Nullable callbackUrl;
@property (nonatomic, strong) GDAddress * _Nullable billingAddress;
@property (nonatomic, strong) GDAddress * _Nullable shippingAddress;
@property (nonatomic, copy) NSString * _Nullable customerEmail;
@property (nonatomic, copy) NSString * _Nullable returnUrl;
@property (nonatomic) BOOL restrictPaymentMethods;
@property (nonatomic, copy) NSArray<NSString *> * _Nullable paymentMethods;
@property (nonatomic, copy) NSArray<GDBNPLItem *> * _Nullable items;
@property (nonatomic, copy) NSString * _Nullable orderId;
- (nonnull instancetype)initWithCustomerIdentifier:(NSString * _Nullable)customerIdentifier totalAmount:(double)totalAmount currency:(NSString * _Nullable)currency merchantReferenceId:(NSString * _Nullable)merchantReferenceId callbackUrl:(NSString * _Nullable)callbackUrl billingAddress:(GDAddress * _Nullable)billingAddress shippingAddress:(GDAddress * _Nullable)shippingAddress customerEmail:(NSString * _Nullable)customerEmail restrictPaymentMethods:(BOOL)restrictPaymentMethods paymentMethods:(NSArray<NSString *> * _Nullable)paymentMethods items:(NSArray<GDBNPLItem *> * _Nullable)items orderId:(NSString * _Nullable)orderId OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC16GeideaPaymentSDK21GDSouhoolaBNPLDetails")
@interface GDSouhoolaBNPLDetails : NSObject
@property (nonatomic, copy) NSString * _Nullable souhoolaTransactionId;
@property (nonatomic, copy) NSString * _Nullable firstInstallmentDate;
@property (nonatomic, copy) NSString * _Nullable lastInstallmentDate;
- (nonnull instancetype)initWithSouhoolaTransactionId:(NSString * _Nullable)souhoolaTransactionId totalInvoicePrice:(double)totalInvoicePrice downPayment:(double)downPayment loanAmount:(double)loanAmount netAdminFees:(double)netAdminFees mainAdminFees:(double)mainAdminFees tenure:(NSInteger)tenure annualRate:(double)annualRate firstInstallmentDate:(NSString * _Nullable)firstInstallmentDate lastInstallmentDate:(NSString * _Nullable)lastInstallmentDate installmentAmount:(double)installmentAmount OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC16GeideaPaymentSDK23GDSouhoolaBasicResponse")
@interface GDSouhoolaBasicResponse : NSObject
@property (nonatomic, copy) NSString * _Nullable responseCode;
@property (nonatomic, copy) NSString * _Nullable detailedResponseCode;
@property (nonatomic, copy) NSString * _Nullable responseMessage;
@property (nonatomic, copy) NSString * _Nullable detailedResponseMessage;
@property (nonatomic, copy) NSString * _Nullable language;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC16GeideaPaymentSDK23GDSouhoolaCancelDetails")
@interface GDSouhoolaCancelDetails : NSObject
@property (nonatomic, copy) NSString * _Nullable customerIdentifier;
@property (nonatomic, copy) NSString * _Nullable customerPin;
@property (nonatomic, copy) NSString * _Nullable souhoolaTransactionId;
- (nonnull instancetype)initWithCustomerIdentifier:(NSString * _Nullable)customerIdentifier customerPin:(NSString * _Nullable)customerPin souhoolaTransactionId:(NSString * _Nullable)souhoolaTransactionId OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC16GeideaPaymentSDK24GDSouhoolaConfirmDetails")
@interface GDSouhoolaConfirmDetails : NSObject
@property (nonatomic, copy) NSString * _Nullable customerIdentifier;
@property (nonatomic, copy) NSString * _Nullable customerPin;
@property (nonatomic, copy) NSString * _Nullable orderId;
@property (nonatomic, copy) NSString * _Nullable souhoolaTransactionId;
@property (nonatomic, copy) NSString * _Nullable otp;
- (nonnull instancetype)initWithCustomerIdentifier:(NSString * _Nullable)customerIdentifier customerPin:(NSString * _Nullable)customerPin orderId:(NSString * _Nullable)orderId souhoolaTransactionId:(NSString * _Nullable)souhoolaTransactionId otp:(NSString * _Nullable)otp OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC16GeideaPaymentSDK25GDSouhoolaInstallmentPlan")
@interface GDSouhoolaInstallmentPlan : NSObject
@property (nonatomic) NSInteger tenorMonth;
@property (nonatomic) double installmentAmount;
@property (nonatomic, copy) NSString * _Nullable rate;
@property (nonatomic, copy) NSString * _Nullable promoCode;
@property (nonatomic) BOOL downPaymentPromo;
@property (nonatomic) BOOL adminFeesPromo;
@property (nonatomic) BOOL interestPromo;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC16GeideaPaymentSDK33GDSouhoolaInstallmentPlanResponse")
@interface GDSouhoolaInstallmentPlanResponse : NSObject
@property (nonatomic, copy) NSString * _Nullable kstDate;
@property (nonatomic, copy) NSString * _Nullable debtNo;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC16GeideaPaymentSDK33GDSouhoolaInstallmentPlanSelected")
@interface GDSouhoolaInstallmentPlanSelected : NSObject
@property (nonatomic, copy) NSString * _Nullable customerIdentifier;
@property (nonatomic, copy) NSString * _Nullable customerPIN;
@property (nonatomic) double totalAmount;
@property (nonatomic, copy) NSString * _Nullable currency;
@property (nonatomic, copy) NSString * _Nullable merchantReferenceId;
@property (nonatomic, copy) NSString * _Nullable callbackUrl;
@property (nonatomic, strong) GDAddress * _Nullable billingAddress;
@property (nonatomic, strong) GDAddress * _Nullable shippingAddress;
@property (nonatomic, copy) NSString * _Nullable customerEmail;
@property (nonatomic, copy) NSString * _Nullable returnUrl;
@property (nonatomic) BOOL restrictPaymentMethods;
@property (nonatomic, copy) NSArray<NSString *> * _Nullable paymentMethods;
@property (nonatomic, copy) NSString * _Nonnull source;
@property (nonatomic, copy) NSArray<GDBNPLItem *> * _Nullable items;
@property (nonatomic, strong) GDSouhoolaBNPLDetails * _Nullable bnplDetails;
@property (nonatomic) BOOL cashOnDelivery;
@property (nonatomic, copy) NSString * _Nullable orderId;
- (nonnull instancetype)initWithCustomerIdentifier:(NSString * _Nullable)customerIdentifier customerPIN:(NSString * _Nullable)customerPIN totalAmount:(double)totalAmount currency:(NSString * _Nullable)currency merchantReferenceId:(NSString * _Nullable)merchantReferenceId callbackUrl:(NSString * _Nullable)callbackUrl billingAddress:(GDAddress * _Nullable)billingAddress shippingAddress:(GDAddress * _Nullable)shippingAddress customerEmail:(NSString * _Nullable)customerEmail restrictPaymentMethods:(BOOL)restrictPaymentMethods paymentMethods:(NSArray<NSString *> * _Nullable)paymentMethods items:(NSArray<GDBNPLItem *> * _Nullable)items bnplDetails:(GDSouhoolaBNPLDetails * _Nullable)bnplDetails cashOnDelivery:(BOOL)cashOnDelivery orderId:(NSString * _Nullable)orderId OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC16GeideaPaymentSDK41GDSouhoolaInstallmentPlanSelectedResponse")
@interface GDSouhoolaInstallmentPlanSelectedResponse : NSObject
@property (nonatomic, copy) NSString * _Nullable responseCode;
@property (nonatomic, copy) NSString * _Nullable detailedResponseCode;
@property (nonatomic, copy) NSString * _Nullable responseMessage;
@property (nonatomic, copy) NSString * _Nullable detailedResponseMessage;
@property (nonatomic, copy) NSString * _Nullable language;
@property (nonatomic, copy) NSString * _Nullable souhoolaTransactionId;
@property (nonatomic, copy) NSString * _Nullable nextStep;
@property (nonatomic, copy) NSString * _Nullable orderId;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC16GeideaPaymentSDK34GDSouhoolaInstallmentPlansResponse")
@interface GDSouhoolaInstallmentPlansResponse : NSObject
@property (nonatomic, copy) NSString * _Nullable detailedResponseMessage;
@property (nonatomic, copy) NSString * _Nullable detailedResponseCode;
@property (nonatomic, copy) NSString * _Nullable responseMessage;
@property (nonatomic, copy) NSString * _Nullable responseCode;
@property (nonatomic, copy) NSString * _Nullable language;
@property (nonatomic, copy) NSString * _Nullable currency;
@property (nonatomic, copy) NSArray<GDInstallmentPlan *> * _Nullable installmentPlans;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC16GeideaPaymentSDK20GDSouhoolaOTPDetails")
@interface GDSouhoolaOTPDetails : NSObject
@property (nonatomic, copy) NSString * _Nullable customerIdentifier;
@property (nonatomic, copy) NSString * _Nullable customerPin;
@property (nonatomic, copy) NSString * _Nullable orderId;
@property (nonatomic, copy) NSString * _Nullable souhoolaTransactionId;
- (nonnull instancetype)initWithCustomerIdentifier:(NSString * _Nullable)customerIdentifier customerPin:(NSString * _Nullable)customerPin orderId:(NSString * _Nullable)orderId souhoolaTransactionId:(NSString * _Nullable)souhoolaTransactionId OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC16GeideaPaymentSDK26GDSouhoolaResendOTPDetails")
@interface GDSouhoolaResendOTPDetails : NSObject
@property (nonatomic, copy) NSString * _Nullable customerIdentifier;
@property (nonatomic, copy) NSString * _Nullable customerPin;
- (nonnull instancetype)initWithCustomerIdentifier:(NSString * _Nullable)customerIdentifier customerPin:(NSString * _Nullable)customerPin OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC16GeideaPaymentSDK34GDSouhoolaRetreiveInstallmentPlans")
@interface GDSouhoolaRetreiveInstallmentPlans : NSObject
@property (nonatomic, copy) NSString * _Nullable customerIdentifier;
@property (nonatomic, copy) NSString * _Nullable customerPin;
@property (nonatomic) double totalAmount;
@property (nonatomic, copy) NSString * _Nullable currency;
@property (nonatomic) double downPayment;
- (nonnull instancetype)initWithCustomerIdentifier:(NSString * _Nullable)customerIdentifier customerPin:(NSString * _Nullable)customerPin totalAmount:(double)totalAmount currency:(NSString * _Nullable)currency adminFees:(double)adminFees downPayment:(double)downPayment OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC16GeideaPaymentSDK24GDSouhoolaReviewResponse")
@interface GDSouhoolaReviewResponse : NSObject
@property (nonatomic, copy) NSString * _Nullable responseCode;
@property (nonatomic, copy) NSString * _Nullable detailedResponseCode;
@property (nonatomic, copy) NSString * _Nullable responseMessage;
@property (nonatomic, copy) NSString * _Nullable detailedResponseMessage;
@property (nonatomic, copy) NSString * _Nullable language;
@property (nonatomic, copy) NSString * _Nullable souhoolaTransactionId;
@property (nonatomic, copy) NSArray<GDSouhoolaInstallmentPlanResponse *> * _Nullable installments;
@property (nonatomic, copy) NSString * _Nullable administrativeFees;
@property (nonatomic, copy) NSString * _Nullable merchantName;
@property (nonatomic, copy) NSString * _Nullable promoCode;
@property (nonatomic) double annualRate;
@property (nonatomic, copy) NSString * _Nullable firstInstallmentDate;
@property (nonatomic, copy) NSString * _Nullable lastInstallmentDate;
@property (nonatomic) double installmentAmount;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC16GeideaPaymentSDK27GDSouhoolaReviewTransaction")
@interface GDSouhoolaReviewTransaction : NSObject
@property (nonatomic, copy) NSString * _Nullable customerIdentifier;
@property (nonatomic, copy) NSString * _Nullable customerPin;
@property (nonatomic) double totalAmount;
@property (nonatomic, copy) NSString * _Nullable currency;
@property (nonatomic) double downPayment;
@property (nonatomic) NSInteger tenure;
@property (nonatomic) double minimumDownPaymentTenure;
@property (nonatomic, copy) NSString * _Nullable promoCode;
@property (nonatomic) double approvedLimit;
@property (nonatomic) double outstanding;
@property (nonatomic) double availableLimit;
@property (nonatomic) double minLoanAmount;
@property (nonatomic, copy) NSArray<GDBNPLItem *> * _Nullable items;
- (nonnull instancetype)initWithCustomerIdentifier:(NSString * _Nullable)customerIdentifier customerPin:(NSString * _Nullable)customerPin totalAmount:(double)totalAmount currency:(NSString * _Nullable)currency tenure:(NSInteger)tenure downPayment:(double)downPayment minimumDownPaymentTenure:(double)minimumDownPaymentTenure promoCode:(NSString * _Nullable)promoCode approvedLimit:(double)approvedLimit outstanding:(double)outstanding availableLimit:(double)availableLimit minLoanAmount:(double)minLoanAmount items:(NSArray<GDBNPLItem *> * _Nullable)items OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC16GeideaPaymentSDK24GDSouhoolaVerifyResponse")
@interface GDSouhoolaVerifyResponse : NSObject
@property (nonatomic, copy) NSString * _Nullable detailedResponseMessage;
@property (nonatomic, copy) NSString * _Nullable detailedResponseCode;
@property (nonatomic, copy) NSString * _Nullable responseMessage;
@property (nonatomic, copy) NSString * _Nullable responseCode;
@property (nonatomic, copy) NSString * _Nullable language;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC16GeideaPaymentSDK21GDStatementDescriptor")
@interface GDStatementDescriptor : NSObject
@property (nonatomic) NSInteger name;
@property (nonatomic, copy) NSString * _Nullable phone;
@end


SWIFT_CLASS("_TtC16GeideaPaymentSDK17GDTerminalDetails")
@interface GDTerminalDetails : NSObject
@property (nonatomic, copy) NSString * _Nullable tid;
@property (nonatomic, copy) NSString * _Nullable mid;
@property (nonatomic, copy) NSString * _Nullable transactionNumber;
@property (nonatomic, copy) NSString * _Nullable transactionCreateDateTime;
@property (nonatomic, copy) NSString * _Nullable merchantReferenceId;
@property (nonatomic, copy) NSString * _Nullable transactionType;
@property (nonatomic, copy) NSString * _Nullable transactionOutcome;
@property (nonatomic, copy) NSString * _Nullable providerGateId;
@property (nonatomic, copy) NSString * _Nullable paymentWay;
@property (nonatomic, copy) NSString * _Nullable reconciliationKey;
@property (nonatomic, copy) NSString * _Nullable transactionReceiveDateTime;
@property (nonatomic, copy) NSString * _Nullable transactionSentDateTime;
@property (nonatomic, copy) NSString * _Nullable status;
@property (nonatomic, copy) NSString * _Nullable message;
@property (nonatomic, copy) NSString * _Nullable approvalCode;
@property (nonatomic, copy) NSString * _Nullable responseCode;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC16GeideaPaymentSDK21GDTokenizationDetails")
@interface GDTokenizationDetails : NSObject
- (nonnull instancetype)initWithCardOnFile:(BOOL)isCardOnFile initiatedBy:(NSString * _Nullable)initiatedBy agreementId:(NSString * _Nullable)agreementId agreementType:(NSString * _Nullable)agreementType subscriptionId:(NSString * _Nullable)subscriptionId OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC16GeideaPaymentSDK21GDTransactionResponse")
@interface GDTransactionResponse : NSObject
@property (nonatomic, strong) GDAuthenticationDetailsResponse * _Nullable authenticationDetails;
@property (nonatomic) double amount;
@property (nonatomic, copy) NSString * _Nullable createdDate;
@property (nonatomic, copy) NSString * _Nullable createdBy;
@property (nonatomic, copy) NSString * _Nullable updatedDate;
@property (nonatomic, copy) NSString * _Nullable updatedBy;
@property (nonatomic, copy) NSString * _Nullable transactionId;
@property (nonatomic, copy) NSString * _Nullable type;
@property (nonatomic, copy) NSString * _Nullable status;
@property (nonatomic, copy) NSString * _Nullable currency;
@property (nonatomic, copy) NSString * _Nullable source;
@property (nonatomic, copy) NSString * _Nullable authorizationCode;
@property (nonatomic, copy) NSString * _Nullable rrn;
@property (nonatomic, strong) GDPaymentMethodResponse * _Nullable paymentMethod;
@property (nonatomic, strong) GDPostilionDetails * _Nullable postilionDetails;
@property (nonatomic, strong) GDTerminalDetails * _Nullable terminalDetails;
@property (nonatomic, strong) GDMeezaDetails * _Nullable meezaDetails;
@property (nonatomic, strong) GDBNPLDetails * _Nullable bnplDetails;
@property (nonatomic, copy) NSString * _Nullable correlationId;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC16GeideaPaymentSDK36GDVALUInstallmentPlanSelectedDetails")
@interface GDVALUInstallmentPlanSelectedDetails : NSObject
@property (nonatomic, copy) NSString * _Nullable customerIdentifier;
@property (nonatomic) double adminFees;
@property (nonatomic) double totalAmount;
@property (nonatomic, copy) NSString * _Nullable currency;
@property (nonatomic) double downPayment;
@property (nonatomic) double giftCardAmount;
@property (nonatomic) double campaignAmount;
@property (nonatomic) NSInteger tenure;
@property (nonatomic, copy) NSString * _Nullable merchantReferenceId;
@property (nonatomic, copy) NSString * _Nullable callbackUrl;
@property (nonatomic, strong) GDAddress * _Nullable billingAddress;
@property (nonatomic, strong) GDAddress * _Nullable shippingAddress;
@property (nonatomic, copy) NSString * _Nullable customerEmail;
@property (nonatomic, copy) NSString * _Nullable orderId;
@property (nonatomic, copy) NSString * _Nullable bnplOrderId;
@property (nonatomic) BOOL restrictPaymentMethods;
@property (nonatomic, copy) NSArray<NSString *> * _Nullable paymentMethods;
@property (nonatomic) BOOL cashOnDelivery;
@property (nonatomic, copy) NSString * _Nonnull source;
@property (nonatomic, copy) NSString * _Nonnull language;
- (nonnull instancetype)initWithCustomerIdentifier:(NSString * _Nullable)customerIdentifier totalAmount:(double)totalAmount currency:(NSString * _Nullable)currency adminFees:(double)adminFees downPayment:(double)downPayment giftCardAmount:(double)giftCardAmount campaignAmount:(double)campaignAmount tenure:(NSInteger)tenure merchantReferenceId:(NSString * _Nullable)merchantReferenceId callbackUrl:(NSString * _Nullable)callbackUrl billingAddress:(GDAddress * _Nullable)billingAddress shippingAddress:(GDAddress * _Nullable)shippingAddress customerEmail:(NSString * _Nullable)customerEmail orderId:(NSString * _Nullable)orderId bnplOrderId:(NSString * _Nullable)bnplOrderId cashOnDelivery:(BOOL)cashOnDelivery restrictPaymentMethods:(BOOL)restrictPaymentMethods paymentMethods:(NSArray<NSString *> * _Nullable)paymentMethods OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC16GeideaPaymentSDK20GDValuVerifyResponse")
@interface GDValuVerifyResponse : NSObject
@property (nonatomic, copy) NSString * _Nullable detailedResponseMessage;
@property (nonatomic, copy) NSString * _Nullable detailedResponseCode;
@property (nonatomic, copy) NSString * _Nullable responseMessage;
@property (nonatomic, copy) NSString * _Nullable responseCode;
@property (nonatomic, copy) NSString * _Nullable language;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC16GeideaPaymentSDK23GDVerifyCustomerDetails")
@interface GDVerifyCustomerDetails : NSObject
- (nonnull instancetype)initWithCustomerIdentifier:(NSString * _Nullable)customerIdentifier OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC16GeideaPaymentSDK13GeideaBNPLAPI")
@interface GeideaBNPLAPI : NSObject
/// ValU
/// Add this to check if ValU customer can be verified. Please check GeideaForm with BNPL details for exmaple in GeideaPaymentAPI
/// since:
/// 2.3
/// version:
/// 2.3
+ (void)VALUVeriFyCustomerWith:(NSString * _Nullable)phoneNumber completion:(void (^ _Nonnull)(GDValuVerifyResponse * _Nullable, GDErrorResponse * _Nullable))completion;
/// ValU
/// Use this method for getting the valU installment plans object based of GDInstallmentPlanDetails
/// since:
/// 2.3
/// version:
/// 2.3
+ (void)VALUGetInstallmentPlanWith:(GDInstallmentPlanDetails * _Nullable)installmentPlanDetails completion:(void (^ _Nonnull)(GDInstallmentPlansResponse * _Nullable, GDErrorResponse * _Nullable))completion;
/// ValU
/// You need to usde this method when the user selects an installment plan from table. Order Id and BNPLOrder id will be retreived in response
/// since:
/// 2.3
/// version:
/// 2.3
+ (void)VALUInstallmentPlanSelectedWith:(GDVALUInstallmentPlanSelectedDetails * _Nullable)installmentPlanDetails completion:(void (^ _Nonnull)(GDInstallmentPlanSelectedResponse * _Nullable, GDErrorResponse * _Nullable))completion;
/// ValU
/// Use this method for generate the OTP. You can use it for resend code also. Need customerIdentifier and the BNPLOrderId from selected plans
/// since:
/// 2.3
/// version:
/// 2.3
+ (void)VALUGenerateOTPWith:(NSString * _Nonnull)customerIdentier BNPLOrderId:(NSString * _Nonnull)BNPLOrderId completion:(void (^ _Nonnull)(GDBNPLResponse * _Nullable, GDErrorResponse * _Nullable))completion;
/// ValU
/// Use this method for confirm the purchase with valU
/// since:
/// 2.3
/// version:
/// 2.3
+ (void)VALUPurchaseWith:(GDBNPLPurchaseDetails * _Nullable)purchaseParams completion:(void (^ _Nonnull)(GDBNPLPurchaseResponse * _Nullable, GDErrorResponse * _Nullable))completion;
/// Shahry
/// Add this to check if Shahry customer can be verified. You need a Shahry id form TextField to let the user type his own Shahry Id. Please check GeideaForm with BNPL details for exmaple in GeideaPaymentAPI
/// since:
/// 2.3
/// version:
/// 2.3
+ (void)sharyInstallmentPlanSelectedWith:(GDShahrySelectPlanInstallment * _Nullable)installmentPlanDetails completion:(void (^ _Nonnull)(GDInstallmentPlanSelectedResponse * _Nullable, GDErrorResponse * _Nullable))completion;
+ (void)shahryConfirmWith:(GDShahryConfirm * _Nonnull)confirmDetails completion:(void (^ _Nonnull)(GDOrderResponse * _Nullable, GDErrorResponse * _Nullable))completion;
+ (void)shahryCashOnDeliveryWith:(GDCashOnDelivery * _Nonnull)details completion:(void (^ _Nonnull)(GDOrderResponse * _Nullable, GDErrorResponse * _Nullable))completion;
+ (void)souhoolaVeriFyCustomerWith:(NSString * _Nullable)phoneNumber pin:(NSString * _Nullable)pin completion:(void (^ _Nonnull)(GDSouhoolaVerifyResponse * _Nullable, GDErrorResponse * _Nullable))completion;
+ (void)souhoolaGetInstallmentPlanWith:(GDSouhoolaRetreiveInstallmentPlans * _Nonnull)installmentPlanDetails completion:(void (^ _Nonnull)(GDSouhoolaInstallmentPlansResponse * _Nullable, GDErrorResponse * _Nullable))completion;
+ (void)souhoolaReviewTransactionWith:(GDSouhoolaReviewTransaction * _Nonnull)details completion:(void (^ _Nonnull)(GDSouhoolaReviewResponse * _Nullable, GDErrorResponse * _Nullable))completion;
+ (void)souhoolaInstallmentPlanSelectedWith:(GDSouhoolaInstallmentPlanSelected * _Nonnull)details completion:(void (^ _Nonnull)(GDSouhoolaInstallmentPlanSelectedResponse * _Nullable, GDErrorResponse * _Nullable))completion;
+ (void)souhoolaGenerateOTPWith:(GDSouhoolaOTPDetails * _Nonnull)details completion:(void (^ _Nonnull)(GDSouhoolaBasicResponse * _Nullable, GDErrorResponse * _Nullable))completion;
+ (void)souhoolaResendOTPWith:(GDSouhoolaResendOTPDetails * _Nonnull)details completion:(void (^ _Nonnull)(GDSouhoolaBasicResponse * _Nullable, GDErrorResponse * _Nullable))completion;
+ (void)souhoolaCancelWith:(GDSouhoolaCancelDetails * _Nonnull)details completion:(void (^ _Nonnull)(GDSouhoolaBasicResponse * _Nullable, GDErrorResponse * _Nullable))completion;
+ (void)souhoolaConfirmWith:(GDSouhoolaConfirmDetails * _Nonnull)details completion:(void (^ _Nonnull)(GDSouhoolaBasicResponse * _Nullable, GDErrorResponse * _Nullable))completion;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class NSTimer;
@class UIImage;
enum Language : NSInteger;
@class PKPayment;

SWIFT_CLASS("_TtC16GeideaPaymentSDK16GeideaPaymentAPI")
@interface GeideaPaymentAPI : NSObject
/// Singleton private initializer: internal use
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
/// Check if  login storage already available in SDK
/// <h1>Examples</h1>
/// Add this to check if credentials are already stored in the SDK Secure storage
/// \code
/// if !GeideaPaymentAPI .isCredentialsAvailable() {
/// GeideaPaymentAPI.setCredentials(withMerchantKey:  "publicKey", andPassword: "password")
/// }
///
/// \endcode\code
/// if (![GeideaPaymentAPI isCredentialsAvailable]) {
/// [GeideaPaymentAPI setCredentialsWithMerchantKey: @"merchantPublicKey" andPassword: @"merchantPassword"];
/// }
///
/// \endcodesince:
/// 1.0
/// version:
/// 1.0
+ (BOOL)isCredentialsAvailable SWIFT_WARN_UNUSED_RESULT;
/// Set login credentials / authenticate in SDK with merchat publicKey and password
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     merchantKey:String - The Geidea assigned merchantPublicKey. <em>Required</em>
///   </li>
///   <li>
///     password:String - The Geidea assigned password. <em>Required</em>
///   </li>
/// </ul>
/// <h1>Examples</h1>
/// Add this to check if credentials are already stored in the SDK Secure storage
/// \code
/// if !GeideaPaymentAPI .isCredentialsAvailable() {
/// GeideaPaymentAPI.setCredentials(withMerchantKey:  "merchantKey", andPassword: "password")
/// }
///
/// \endcode\code
/// if (![GeideaPaymentAPI isCredentialsAvailable]) {
/// [GeideaPaymentAPI setCredentialsWithMerchantKey: @"merchantPublicKey" andPassword: @"merchantPassword"];
/// }
///
/// \endcodeattention:
/// Be sure to authenticate your app with  SDK before continue with payment process  <em>pay</em>
/// since:
/// 1.0
/// version:
/// 1.0
+ (void)setCredentialsWithMerchantKey:(NSString * _Nonnull)merchantKey andPassword:(NSString * _Nonnull)password;
/// Starting the payment flow
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     amount: GDAmount - SDK GDAmount object  <em>Required</em>
///     amount: Double <em>Required</em>
///     currency: String <em>Required</em>
///   </li>
///   <li>
///     cardDetails: GDCardDetails - SDK GDCardDetails object  <em>Required</em>
///     cardholderName: String <em>Required</em>
///     cardNumber: String <em>Required</em>
///     cvv: String <em>Required</em>
///     expiryYear: Int <em>Required</em>
///     expiryMonth: Int <em>Required</em>
///   </li>
///   <li>
///     tokenizationDetails: GDTokenizationDetails <em>Optional</em>
///     cardOnFile: Bool <em>Optional</em> true for tokenization
///     initiatedBy: String <em>Optional</em> Must be “Internet” if card On file true
///     agreementID: String <em>Optional</em> Any value
///     agreementType String <em>Optional</em> e.g “Recurring” , “installment” ,“Unscheduled” , etc
///   </li>
///   <li>
///     paymentIntentId: String  <em>Optional</em> PaymentIntent id for paying a PaymentIntent created before
///   </li>
///   <li>
///     customerDetails: GDCustomerDetails - SDK GDCustomerDetails object use for internal customer reference for customer info  . <em>Optional</em>
///     customerEmail: String <em>Optional</em>
///     callbackUrl: String <em>Optional</em>
///     merchantReferenceId: String <em>Optional</em>
///     paymentOperation: PaymentOperation <em>Optional</em>
///   </li>
///   <li>
///     shippingAddress: GDAddress <em>Optional</em>
///     countryCode: String <em>Optional</em>
///     city: String <em>Optional</em>
///     street: String <em>Optional</em>
///     postCode: String <em>Optional</em>
///   </li>
///   <li>
///     billingAddress: GDAddress <em>Optional</em>
///     countryCode: String <em>Optional</em>
///     city: String <em>Optional</em>
///     street: String <em>Optional</em>
///     postCode: String <em>Optional</em>
///   </li>
///   <li>
///     navController: UIViewController - Used for presenting SDK Payment flow. <em>Required</em>
///     two options for starting the SDK:
///     self type of : (UIViewController) the SDK will present modally from customer app UIViewController
///     navigationController type of: UINavigationController  the SDK will be pushed from customer app NavigationCotroller
///   </li>
///   <li>
///     completion: (GDOrderResponse?, GDErrorResponse?)  -> Void - The completion handler for customer app returned from SDK <em>Required</em>
///   </li>
/// </ul>
/// <h1>Examples</h1>
/// Starting the payment flow
/// \code
/// let amount = GDAmount(amount: Double, currency: String)
/// let cardDetails = GDCardDetails(withCardholderName: cardHolderName: String, andCardNumber:  cardNumber: String, andCVV: cvv: String, andExpiryMonth: expiryMonth: Int)
/// let tokenizationDetails = GDTokenizationDetails(withCardOnFile:Bool (true if the card will be tokenized), initiatedBy:  "Internet" (can be null if cardOnFile false otherwise mandatory), agreementId: String, String)
/// let shippingAddress = GDAddress(withCountryCode: shippingCountryCode: String, andCity: shippingCity: String, andStreet: shippingStreet: String, andPostCode: shippingPostalCode: String)
/// let billingAddress = GDAddress(withCountryCode: billingCountryCode: String, andCity: billingCity: String, andStreet: billingStreet: String, andPostCode: billingPostalCode: String)
/// let customerDetails = GDCustomerDetails(withEmail: email: String, andCallbackUrl: callback: String, merchantReferenceId: merchantRefid: String, shippingAddress: shippingAddress, billingAddress: billingAddress, paymentOperation: .pay or .preAuthorize etc..)
///
/// guard let navVC = UIApplication.shared.keyWindow?.rootViewController as? UINavigationController  else {
/// return
/// }
///
/// GeideaPaymentAPI.pay(theAmount: amount, withCardDetails: cardDetails, andTokenizationDetails: tokenizationDetails, andPaymentIntentId: paymentIntentId,andCustomerDetails: customerDetails, navController: **navVC** or **self**, completion:{ response, error in
/// DispatchQueue.main.async {
///
/// if let err = error {
/// if err.errors.isEmpty {
/// var message = ""
/// if err.responseCode.isEmpty {
/// message = "\n responseMessage: \(err.responseMessage)"
/// } else {
/// message = "\n responseCode: \(err.responseCode)  \n responseMessage: \(err.responseMessage)"
/// }
/// //TODO: display relevant fields from GDErrorResponse
/// } else {
/// //TODO: display relevant fields from GDErrorResponse
/// }
///
/// } else {
/// guard let orderResponse = response else {
/// return
/// }
///
/// //TODO: display relevant fields from GDOrderResponse
/// //TODO: if cardOnFile is true save tokenId from GDOrderResponse in persistence and also agreementId and agreementType for subscriptions
/// //TODO: if paymentOperation is PaymentOperation.preAuthorize:
/// // Save order id in persistence for capturing the payment with // GeideaPaymentApi.capture
/// // if orderResponse.detailedStatus == "Authorized" {
/// // TODO: save order.orderId
/// // }
/// }
/// }
/// })
///
/// \endcode\code
/// UINavigationController *navVC =  (UINavigationController *)[[[UIApplication sharedApplication] keyWindow] rootViewController];
///
/// GDAmount *amount = [[GDAmount alloc] initWithAmount: [amunt doubleValue] currency: NSString *curency];
///
/// GDCardDetails *cardDetails = [[GDCardDetails alloc] initWithCardholderName: NSString *cardHolderName andCardNumber: NSString *cardNumber andCVV: NSString *cvv andExpiryMonth: [expiryMonth integerValue] andExpiryYear: [expiryYear integerValue]];
///
/// GDTokenizationDetails *tokenizationDetails = [[GDTokenizationDetails alloc] initWithCardOnFile:Bool initiatedBy: NSString  agreementId:NSString agreementType:NSString];
///
/// GDAddress *shippingAddress = [[GDAddress alloc] initWithCountryCode:NSString *shippingCountryCode andCity:_shippingCityTF.text andStreet:_shippingStreetTF.text andPostCode:_shippingPostCodeTF.text];
///
/// GDAddress *billingAddress = [[GDAddress alloc] initWithCountryCode:_billingCountryCodeTF.text andCity:_billingCityTF.text andStreet:_billingStreetTF.text andPostCode:_billingPostCodeTF.text];
///
/// GDCustomerDetails *customerDetails = [[GDCustomerDetails alloc] initWithEmail:_emailTF.text andCallbackUrl:_callbackUrlTF.text merchantReferenceId:_merchantRefIDTF.text shippingAddress:shippingAddress billingAddress:billingAddress paymentOperation: PaymentOperationPay];
///
/// [GeideaPaymentAPI payWithTheAmount:amount withCardDetails:cardDetails  andTokenizationDetails: tokenizationDetails andPaymentIntentId: paymentIntentId andCustomerDetails:customerDetails dismissAction:NULL navController: **navVC** or **self** completion:^(GDOrderResponse* order, GDErrorResponse* error) {
///
/// if (error != NULL) {
/// if (!error.errors || !error.errors.count) {
/// NSString *message;
/// if ( [error.responseCode length] == 0) {
/// message = [NSString stringWithFormat:@"\n responseMessage: %@", error.responseMessage];
/// } else {
/// message = [NSString stringWithFormat:@"\n responseCode: %@ \n responseMessage: %@ ", error.responseCode , error.responseMessage];
/// }
///
/// //TODO: display relevant fields from GDErrorResponse
/// } else {
/// //TODO: display relevant fields from GDErrorResponse
/// }
///
/// } else {
/// if (order != NULL) {
/// //TODO: display relevant fields from GDOrderResponse
/// //TODO: if cardOnFile is true save tokenId from GDOrderResponse in persistence and also agreementId and agreementType for subscriptions (InitistedBy = "Merchant")
/// // TODO: check  [order tokenId] != NULL
/// //TODO: if paymentOperation is PaymentOperation.preAuthorize:
/// Save order id in persistence for capturing the payment with // GeideaPaymentApi.capture
/// if ([[order detailedStatus] isEqual: @"Authorized"]) {
/// TODO: save order.orderId
/// }
/// }
/// }
/// }];
///
/// \endcodeseealso:
/// GDAmount, GDCardDetails, GDTokenizationDetails, GDCustomerDetails, GDAddress, GDOrderResponse, GDErrorResponse
/// since:
/// 1.0
/// version:
/// 1.0`
+ (void)payWithTheAmount:(GDAmount * _Nonnull)amount withCardDetails:(GDCardDetails * _Nonnull)cardDetails initializeResponse:(GDInitiateAuthenticateResponse * _Nullable)initializeResponse config:(GDConfigResponse * _Nullable)config isHPP:(BOOL)isHPP showReceipt:(BOOL)showReceipt andTokenizationDetails:(GDTokenizationDetails * _Nullable)tokenizationDetails andPaymentIntentId:(NSString * _Nullable)paymentIntentId andCustomerDetails:(GDCustomerDetails * _Nullable)customerDetails orderId:(NSString * _Nullable)orderId paymentMethods:(NSArray<NSString *> * _Nullable)paymentMethods dismissAction:(void (^ _Nullable)(GDCancelResponse * _Nullable, GDErrorResponse * _Nullable))dismissAction navController:(UIViewController * _Nonnull)navController completion:(void (^ _Nonnull)(GDOrderResponse * _Nullable, GDErrorResponse * _Nullable))completion;
+ (void)initiateAuthenticateWithTheAmount:(GDAmount * _Nonnull)amount withCardNumber:(NSString * _Nullable)cardNumber andTokenizationDetails:(GDTokenizationDetails * _Nullable)tokenizationDetails andPaymentIntentId:(NSString * _Nullable)paymentIntentId andCustomerDetails:(GDCustomerDetails * _Nullable)customerDetails orderId:(NSString * _Nullable)orderId paymentMethods:(NSArray<NSString *> * _Nullable)paymentMethods dismissAction:(void (^ _Nullable)(GDCancelResponse * _Nullable, GDErrorResponse * _Nullable))dismissAction navController:(UIViewController * _Nonnull)navController completion:(void (^ _Nonnull)(GDInitiateAuthenticateResponse * _Nullable, GDErrorResponse * _Nullable))completion;
/// Starting the payment flow using Geidea Form including the Payment selection screen with available methods
/// This available methods can be restricted by using the parameter paymentMethods
/// <ul>
///   <li>
///     paymentMethods: [String]  <em>Optional</em> if null the Form will be configured from your  merchant config GDConfigResponse
///     For example by using paymentMethods: [“visa”] the card payment will be restricted only on visa, other payment types will be restricted by the system
///     Availble keywords: meezaDigital, visa, mastercard, mada, meeza
///   </li>
///   <li>
///     Card payment see - Parameters section
///   </li>
///   <li>
///     ApplePay payment  <em>Optional</em>
///     You will need to add an extra paramater:
///   </li>
///   <li>
///     applePayDetails: GDApplePayDetails <em>Optional</em> to use this feature
///   </li>
///   <li>
///     QR payment  <em>Optional</em> Available in Egypt
///     You will need to add some extra paramaters if you want to use this payment type
///   </li>
///   <li>
///     qrCustomerDetails:  GDPICustomer  <em>Required</em>
///   </li>
///   <li>
///     qrExpiryDate: String <em>Required</em> yyyy-MM-dd
///   </li>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     amount: GDAmount - SDK GDAmount object  <em>Required</em>
///     amount: Double <em>Required</em>
///     currency: String <em>Required</em>
///   </li>
///   <li>
///     showAddress: Bool  <em>Required</em> true or false if you use your own addresses form
///   </li>
///   <li>
///     showEmail: Bool  <em>Required</em> true or false if you use your own email form
///   </li>
///   <li>
///     showReceipt: Bool  <em>Required</em> true or false.  set to true if you want a Receipt UI for Success or Failure. False if you want to made a branded Success /Failure scren
///   </li>
///   <li>
///     tokenizationDetails: GDTokenizationDetails <em>Optional</em>
///     cardOnFile: Bool <em>≈</em> true for tokenization
///     initiatedBy: String <em>Optional</em> Must be “Internet” if card On file true
///     agreementID: String <em>Optional</em> mercha
///     agreementType String <em>Optional</em> e.g “Recurring” , “installment” ,“Unscheduled” , etc
///   </li>
///   <li>
///     applePayDetails: GDApplePayDetails - SDK GDApplePayDetails <em>Optional</em> necessary if you want to use this feature
///   </li>
///   <li>
///     config: GDConfigResponse - SDK GDConfigResponse <em>Optional</em> if you provide your saved config, otherwise it will be refreshed inside the form
///   </li>
///   <li>
///     customerDetails: GDCustomerDetails - SDK GDCustomerDetails object use for internal customer reference for customer info . if you use it with showAddress and showEmail, form will be completed automatically with details provided <em>Optional</em>
///     customerEmail: String <em>Optional</em>
///     callbackUrl: String <em>Optional</em>
///     merchantReferenceId: String <em>Optional</em>
///     paymentOperation: PaymentOperation <em>Optional</em>
///   </li>
///   <li>
///     shippingAddress: GDAddress <em>Optional</em>
///     countryCode: String <em>Optional</em>
///     city: String <em>Optional</em>
///     street: String <em>Optional</em>
///     postCode: String <em>Optional</em>
///   </li>
///   <li>
///     billingAddress: GDAddress <em>Optional</em>
///     countryCode: String <em>Optional</em>
///     city: String <em>Optional</em>
///     street: String <em>Optional</em>
///     postCode: String <em>Optional</em>
///   </li>
///   <li>
///     paymentIntentId: String  <em>Optional</em> paymentIntentId id for paying a paymentIntent created before
///   </li>
///   <li>
///     qrCustomerDetails: GDPICustomer <em>Optional</em> QRCustomerDetails if you want to integrate meeza
///   </li>
///   <li>
///     qrExpiryDate: String <em>Optional</em> QRCustomerDetails if you want to integrate meeza with a custom expiryDate, default is on month
///   </li>
///   <li>
///     paymentMethods:  [String] <em>Optional</em> You can restrict paymentMethods with the values QR, visa, mastercard meeza, mada
///   </li>
///   <li>
///     navController: UIViewController - Used for presenting SDK Payment flow. <em>Required</em>
///     self type of : (UIViewController) the SDK will present modally from customer app UIViewController
///   </li>
///   <li>
///     completion: (GDOrderResponse?, GDErrorResponse?)  -> Void - The completion handler for customer app returned from SDK <em>Required</em>
///   </li>
/// </ul>
/// <h1>Examples</h1>
/// Starting the payment flow
/// \code
/// let amount = GDAmount(amount: Double, currency: String)
/// let tokenizationDetails = GDTokenizationDetails(withCardOnFile:Bool (true if the card will be tokenized), initiatedBy:  "Internet" (can be null if cardOnFile false otherwise mandatory), agreementId: String, agreementType: String)
/// let applePayDetails = GDApplePayDetails(in: self, andButtonIn: applePayBtnView or null if use payment selection list, forMerchantIdentifier: "merchant.company. etc.", withCallbackUrl: String, andReferenceId: String)
///
/// GeideaPaymentAPI.payWithGeideaForm(theAmount: amount, showAddress: Bool, showEmail: Bool, tokenizationDetails: tokenizationDetails, customerDetails: customerDetails, applePayDetails: applePayDetails, config: self.merchantConfig, paymentIntentIdId: paymentIntentIdId, navController: self, completion:{ response, error in
/// DispatchQueue.main.async {
///
/// if let err = error {
/// if err.errors.isEmpty {
/// var message = ""
/// if err.responseCode.isEmpty {
/// message = "\n responseMessage: \(err.responseMessage)"
/// } else {
/// message = "\n responseCode: \(err.responseCode)  \n responseMessage: \(err.responseMessage)"
/// }
/// //TODO: display relevant fields from GDErrorResponse
/// } else {
/// //TODO: display relevant fields from GDErrorResponse
/// }
///
/// } else {
/// guard let orderResponse = response else {
/// return
/// }
///
/// //TODO: display relevant fields from GDOrderResponse
/// //TODO: if cardOnFile is true save tokenId from GDOrderResponse in persistence and also agreementId and agreementType for subscriptions
/// //TODO: if paymentOperation is PaymentOperation.preAuthorize:
/// // Save order id in persistence for capturing the payment with // GeideaPaymentApi.capture
/// // if orderResponse.detailedStatus == "Authorized" {
/// // TODO: save order.orderId
/// // }
/// }
/// }
/// })
///
/// \endcode\code
/// UINavigationController *navVC =  (UINavigationController *)[[[UIApplication sharedApplication] keyWindow] rootViewController];
///
/// GDAmount *amount = [[GDAmount alloc] initWithAmount: [amunt doubleValue] currency: NSString *curency];
///
/// GDTokenizationDetails *tokenizationDetails = [[GDTokenizationDetails alloc] initWithCardOnFile:Bool initiatedBy: NSString  agreementId:NSString agreementType:NSString];
///
/// GDApplePayDetails *applePayDetails = [[GDApplePayDetails alloc] initIn:self andButtonIn:_applePayBtnView forMerchantIdentifier:@"merchant.etc" withCallbackUrl:String andReferenceId:String];
///
///
/// [GeideaPaymentAPI payWithGeideaFormWithTheAmount:amount showAddress:Bool showEmail:Bool tokenizationDetails:tokenizationDetails customerDetails:NULL applePayDetails:applePayDetails config:self.config paymentIntentIdId: paymentIntentIdId navController: **self** completion:^(GDOrderResponse* order, GDErrorResponse* error) {
///
/// if (error != NULL) {
/// if (!error.errors || !error.errors.count) {
/// NSString *message;
/// if ( [error.responseCode length] == 0) {
/// message = [NSString stringWithFormat:@"\n responseMessage: %@", error.responseMessage];
/// } else {
/// message = [NSString stringWithFormat:@"\n responseCode: %@ \n responseMessage: %@ ", error.responseCode , error.responseMessage];
/// }
///
/// //TODO: display relevant fields from GDErrorResponse
/// } else {
/// //TODO: display relevant fields from GDErrorResponse
/// }
///
/// } else {
/// if (order != NULL) {
/// //TODO: display relevant fields from GDOrderResponse
/// //TODO: if cardOnFile is true save tokenId from GDOrderResponse in persistence and also agreementId and agreementType for subscriptions (InitistedBy = "Merchant")
/// // TODO: check  [order tokenId] != NULL
/// //TODO: if paymentOperation is PaymentOperation.preAuthorize:
/// Save order id in persistence for capturing the payment with // GeideaPaymentApi.capture
/// if ([[order detailedStatus] isEqual: @"Authorized"]) {
/// TODO: save order.orderId
/// }
/// }
/// }
/// }];
///
/// \endcodeseealso:
/// GDAmount, GDApplePayDetails, GDTokenizationDetails,GDConfigResponse,  GDCustomerDetails, GDAddress, GDOrderResponse, GDErrorResponse, GDApplePayResponse
/// since:
/// 1.0
/// version:
/// 1.0
+ (void)payWithGeideaFormWithTheAmount:(GDAmount * _Nonnull)amount showAddress:(BOOL)showAddress showEmail:(BOOL)showEmail showReceipt:(BOOL)showReceipt tokenizationDetails:(GDTokenizationDetails * _Nullable)tokenizationDetails customerDetails:(GDCustomerDetails * _Nullable)customerDetails applePayDetails:(GDApplePayDetails * _Nullable)applePayDetails config:(GDConfigResponse * _Nullable)config paymentIntentId:(NSString * _Nullable)paymentIntentId qrDetails:(GDQRDetails * _Nullable)qrDetails bnplItems:(NSArray<GDBNPLItem *> * _Nullable)bnplItems cardPaymentMethods:(NSArray<NSString *> * _Nullable)cardPaymentMethods paymentSelectionMethods:(NSArray<GDPaymentSelectionMetods *> * _Nullable)paymentSelectionMethods viewController:(UIViewController * _Nonnull)viewController completion:(void (^ _Nonnull)(GDOrderResponse * _Nullable, GDErrorResponse * _Nullable))completion;
/// Starting paying QR flow using Geidea Form
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     amount: GDAmount - SDK GDAmount object  <em>Required</em>
///     amount: Double <em>Required</em>
///     currency: String <em>Required</em>
///   </li>
///   <li>
///     customer: GDPaymentIntentCustomer  <em>Required</em>
///   </li>
///   <li>
///     expiryDate: Date <em>Required</em>
///   </li>
///   <li>
///     merchantPublicKey: String <em>Required</em>
///   </li>
///   <li>
///     showReceipt: Bool <em>Optional</em> true if you want to show Geidea receipt screen
///   </li>
///   <li>
///     navController: UIViewController - Used for presenting SDK Payment flow. <em>Required</em>
///     self type of : (UIViewController) the SDK will present modally from customer app UIViewController
///   </li>
///   <li>
///     completion: (GDOrderResponse?, GDErrorResponse?)  -> Void - The completion handler for customer app returned from SDK <em>Required</em>
///   </li>
/// </ul>
/// <h1>Examples</h1>
/// Starting the pay QR with Geidea form
/// \code
/// let amount = GDAmount(amount: Double, currency: String)
///
///
/// GeideaPaymentAPI.payQRWithGeideaForm(theAmount: amount, customer: GDPaymentIntentCustomer, expiryDate: Date, merchantPublicKey: String, showReceipt: Bool, navController: self, completion:{ response, error in
/// DispatchQueue.main.async {
///
/// if let err = error {
/// if err.errors.isEmpty {
/// var message = ""
/// if err.responseCode.isEmpty {
/// message = "\n responseMessage: \(err.responseMessage)"
/// } else {
/// message = "\n responseCode: \(err.responseCode)  \n responseMessage: \(err.responseMessage)"
/// }
/// //TODO: display relevant fields from GDErrorResponse
/// } else {
/// //TODO: display relevant fields from GDErrorResponse
/// }
///
/// } else {
/// guard let orderResponse = response else {
/// return
/// }
///
/// //TODO: display relevant fields from GDOrderResponse
/// //TODO: if cardOnFile is true save tokenId from GDOrderResponse in persistence and also agreementId and agreementType for subscriptions
/// //TODO: if paymentOperation is PaymentOperation.preAuthorize:
/// // Save order id in persistence for capturing the payment with // GeideaPaymentApi.capture
/// // if orderResponse.detailedStatus == "Authorized" {
/// // TODO: save order.orderId
/// // }
/// }
/// }
/// })
///
/// \endcode\code
/// UINavigationController *navVC =  (UINavigationController *)[[[UIApplication sharedApplication] keyWindow] rootViewController];
///
/// GDAmount *amount = [[GDAmount alloc] initWithAmount: [amount doubleValue] currency: NSString *curency];
///
///
///
/// [GeideaPaymentAPI payQRWithGeideaFormWithTheAmount:amount customer:GDPaymentIntentCustomer expiryDate:Date merchantPublicKey:String showReceipt:true navController: **self** completion:^(GDOrderResponse* order, GDErrorResponse* error) {
///
/// if (error != NULL) {
/// if (!error.errors || !error.errors.count) {
/// NSString *message;
/// if ( [error.responseCode length] == 0) {
/// message = [NSString stringWithFormat:@"\n responseMessage: %@", error.responseMessage];
/// } else {
/// message = [NSString stringWithFormat:@"\n responseCode: %@ \n responseMessage: %@ ", error.responseCode , error.responseMessage];
/// }
///
/// //TODO: display relevant fields from GDErrorResponse
/// } else {
/// //TODO: display relevant fields from GDErrorResponse
/// }
///
/// } else {
/// if (order != NULL) {
/// //TODO: display relevant fields from GDOrderResponse
/// //TODO: if cardOnFile is true save tokenId from GDOrderResponse in persistence and also agreementId and agreementType for subscriptions (InitistedBy = "Merchant")
/// // TODO: check  [order tokenId] != NULL
/// //TODO: if paymentOperation is PaymentOperation.preAuthorize:
/// Save order id in persistence for capturing the payment with // GeideaPaymentApi.capture
/// if ([[order detailedStatus] isEqual: @"Authorized"]) {
/// TODO: save order.orderId
/// }
/// }
/// }
/// }];
///
/// \endcodeseealso:
/// GDAmount, GDApplePayDetails, GDTokenizationDetails,GDConfigResponse,  GDCustomerDetails, GDAddress, GDOrderResponse, GDErrorResponse, GDApplePayResponse
/// since:
/// 1.0
/// version:
/// 1.0
+ (void)payQRWithGeideaFormWithTheAmount:(GDAmount * _Nonnull)amount qrDetails:(GDQRDetails * _Nonnull)qrDetails config:(GDConfigResponse * _Nullable)config showReceipt:(BOOL)showReceipt orderId:(NSString * _Nullable)orderId callbackUrl:(NSString * _Nullable)callbackUrl viewController:(UIViewController * _Nonnull)viewController completion:(void (^ _Nonnull)(GDOrderResponse * _Nullable, GDErrorResponse * _Nullable))completion;
/// Starting paying QR flow
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     amount: GDAmount - SDK GDAmount object  <em>Required</em>
///     amount: Double <em>Required</em>
///     currency: String <em>Required</em>
///   </li>
///   <li>
///     customer: GDPaymentIntentCustomer  <em>Required</em>
///   </li>
///   <li>
///     expiryDate: Date <em>Required</em>
///   </li>
///   <li>
///     merchantPublicKey: String <em>Required</em>
///   </li>
///   <li>
///     showReceipt: Bool <em>Optional</em> true if you want to show Geidea receipt screen
///   </li>
///   <li>
///     navController: UIViewController - Used for presenting SDK Payment flow. <em>Required</em>
///     self type of : (UIViewController) the SDK will present modally from customer app UIViewController
///   </li>
///   <li>
///     completion: (GDOrderResponse?, GDErrorResponse?)  -> Void - The completion handler for customer app returned from SDK <em>Required</em>
///   </li>
/// </ul>
/// <h1>Examples</h1>
/// Starting the pay QR with Geidea form
/// \code
/// let amount = GDAmount(amount: Double, currency: String)
///
///
/// GeideaPaymentAPI.payQR(theAmount: amount, customer: GDPaymentIntentCustomer, expiryDate: Date, showReceipt: Bool, merchantName: String, navController: self, completion:{ response, error in
/// DispatchQueue.main.async {
///
/// if let err = error {
/// if err.errors.isEmpty {
/// var message = ""
/// if err.responseCode.isEmpty {
/// message = "\n responseMessage: \(err.responseMessage)"
/// } else {
/// message = "\n responseCode: \(err.responseCode)  \n responseMessage: \(err.responseMessage)"
/// }
/// //TODO: display relevant fields from GDErrorResponse
/// } else {
/// //TODO: display relevant fields from GDErrorResponse
/// }
///
/// } else {
/// guard let orderResponse = response else {
/// return
/// }
///
/// //TODO: display relevant fields from GDOrderResponse
/// //TODO: if cardOnFile is true save tokenId from GDOrderResponse in persistence and also agreementId and agreementType for subscriptions
/// //TODO: if paymentOperation is PaymentOperation.preAuthorize:
/// // Save order id in persistence for capturing the payment with // GeideaPaymentApi.capture
/// // if orderResponse.detailedStatus == "Authorized" {
/// // TODO: save order.orderId
/// // }
/// }
/// }
/// })
///
/// \endcode\code
/// UINavigationController *navVC =  (UINavigationController *)[[[UIApplication sharedApplication] keyWindow] rootViewController];
///
/// GDAmount *amount = [[GDAmount alloc] initWithAmount: [amount doubleValue] currency: NSString *curency];
///
///
///
/// [GeideaPaymentAPI payQRWithGeideaFormWithTheAmount:amount customer:GDPaymentIntentCustomer expiryDate:Date, showReceipt:true merchantName:String navController: **self** completion:^(GDOrderResponse* order, GDErrorResponse* error) {
///
/// if (error != NULL) {
/// if (!error.errors || !error.errors.count) {
/// NSString *message;
/// if ( [error.responseCode length] == 0) {
/// message = [NSString stringWithFormat:@"\n responseMessage: %@", error.responseMessage];
/// } else {
/// message = [NSString stringWithFormat:@"\n responseCode: %@ \n responseMessage: %@ ", error.responseCode , error.responseMessage];
/// }
///
/// //TODO: display relevant fields from GDErrorResponse
/// } else {
/// //TODO: display relevant fields from GDErrorResponse
/// }
///
/// } else {
/// if (order != NULL) {
/// //TODO: display relevant fields from GDOrderResponse
/// //TODO: if cardOnFile is true save tokenId from GDOrderResponse in persistence and also agreementId and agreementType for subscriptions (InitistedBy = "Merchant")
/// // TODO: check  [order tokenId] != NULL
/// //TODO: if paymentOperation is PaymentOperation.preAuthorize:
/// Save order id in persistence for capturing the payment with // GeideaPaymentApi.capture
/// if ([[order detailedStatus] isEqual: @"Authorized"]) {
/// TODO: save order.orderId
/// }
/// }
/// }
/// }];
///
/// \endcodeseealso:
/// GDAmount, GDApplePayDetails, GDTokenizationDetails,GDConfigResponse,  GDCustomerDetails, GDAddress, GDOrderResponse, GDErrorResponse, GDApplePayResponse
/// since:
/// 1.0
/// version:
/// 1.0
+ (void)payQRWithTheAmount:(GDAmount * _Nonnull)amount qrDetails:(GDQRDetails * _Nullable)qrDetails config:(GDConfigResponse * _Nullable)config showReceipt:(BOOL)showReceipt merchantName:(NSString * _Nullable)merchantName orderId:(NSString * _Nullable)orderId callbackUrl:(NSString * _Nullable)callbackUrl viewController:(UIViewController * _Nonnull)viewController completion:(void (^ _Nonnull)(GDOrderResponse * _Nullable, GDErrorResponse * _Nullable))completion;
/// Starting the pay with token flow cardDetails already tokenized from Pay request
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     amount: GDAmount - SDK GDAmount object  <em>Required</em>
///     amount: Double <em>Required</em>
///     currency: String <em>Required</em>
///   </li>
///   <li>
///     tokenId: String <em>Required</em>
///   </li>
///   <li>
///     tokenizationDetails: GDTokenizationDetails <em>Required</em>
///     initiatedBy: String <em>Optional</em> Internet or Merchant
///     agreementID: String <em>Optional</em>
///     agreementType String <em>Optional</em> e.g “Installment”, “Recurring”, etc
///   </li>
///   <li>
///     paymentIntentId: String  <em>Optional</em> paymentIntentId id for paying an paymentIntentId created before
///   </li>
///   <li>
///     customerDetails: GDCustomerDetails - SDK GDCustomerDetails object use for internal customer reference for customer info  . <em>Optional</em>
///   </li>
///   <li>
///     GDCustomerDetails:
///     customerEmail: String <em>Optional</em>
///     callbackUrl: String <em>Optional</em>
///     merchantReferenceId: String <em>Optional</em>
///     paymentOperation: PaymentOperation <em>Optional</em>
///   </li>
///   <li>
///     shippingAddress: GDAddress <em>Optional</em>
///   </li>
///   <li>
///     GDAddress:
///     countryCode: String <em>Optional</em>
///     city: String <em>Optional</em>
///     street: String <em>Optional</em>
///     postCode: String <em>Optional</em>
///   </li>
///   <li>
///     billingAddress: GDAddress <em>Optional</em>
///   </li>
///   <li>
///     GDAddress:
///     countryCode: String <em>Optional</em>
///     city: String <em>Optional</em>
///     street: String <em>Optional</em>
///     postCode: String <em>Optional</em>
///   </li>
///   <li>
///     navController: UIViewController - Used for presenting SDK Payment flow. <em>Required</em>
///     two options for starting the SDK:
///     self type of : (UIViewController) the SDK will present modally from customer app UIViewController
///   </li>
///   <li>
///     navigationController type of: UINavigationController  the SDK will be pushed from customer app NavigationCotroller
///   </li>
///   <li>
///     completion: (GDOrderResponse?, GDErrorResponse?)  -> Void - The completion handler for customer app returned from SDK <em>Required</em>
///   </li>
/// </ul>
/// <h1>Examples</h1>
/// Starting the pay with token payment flow
/// \code
/// let amount = GDAmount(amount: Double, currency: String)
/// let tokenizationDetails = GDTokenizationDetails(withCardOnFile: false, initiatedBy: "Internet " or "Merchant", agreementId: someString, agreementType: someString)
/// let shippingAddress = GDAddress(withCountryCode: shippingCountryCode: String, andCity: shippingCity: String, andStreet: shippingStreet: String, andPostCode: shippingPostalCode: String)
/// let billingAddress = GDAddress(withCountryCode: billingCountryCode: String, andCity: billingCity: String, andStreet: billingStreet: String, andPostCode: billingPostalCode: String)
/// let customerDetails = GDCustomerDetails(withEmail: email: String, andCallbackUrl: callback: String, merchantReferenceId: merchantRefid: String, shippingAddress: shippingAddress, billingAddress: billingAddress, paymentOperation: .pay or .preAuthorize etc..)
///
/// guard let navVC = UIApplication.shared.keyWindow?.rootViewController as? UINavigationController  else {
/// return
/// }
///
/// GeideaPaymentAPI.payWithToken(theAmount: amount, withTokenId: tokenId, tokenizationDetails: tokenizationDetails, andpaymentIntentIdId: paymentIntentIdId or null, andCustomerDetails: customerDetails, navController: self, completion:{ response, error in
/// DispatchQueue.main.async {
///
/// if let err = error {
/// if err.errors.isEmpty {
/// var message = ""
/// if err.responseCode.isEmpty {
/// message = "\n responseMessage: \(err.responseMessage)"
/// } else {
/// message = "\n responseCode: \(err.responseCode)  \n responseMessage: \(err.responseMessage)"
/// }
/// //TODO: display relevant fields from GDErrorResponse
/// } else {
/// //TODO: display relevant fields from GDErrorResponse
/// }
///
/// } else {
/// guard let orderResponse = response else {
/// return
/// }
///
/// //TODO: display relevant fields from GDOrderResponse
/// //TODO: if paymentOperation is PaymentOperation.preAuthorize:
/// // Save order id in persistence for capturing the payment with // GeideaPaymentApi.capture
/// // if orderResponse.detailedStatus == "Authorized" {
/// // TODO: save order.orderId
/// // }
/// }
/// }
/// })
///
/// \endcode\code
/// UINavigationController *navVC =  (UINavigationController *)[[[UIApplication sharedApplication] keyWindow] rootViewController];
///
/// GDAmount *amount = [[GDAmount alloc] initWithAmount: [amunt doubleValue] currency: NSString *curency];
///
/// GDTokenizationDetails *tokenizationDetails = [[GDTokenizationDetails alloc] initWithCardOnFile:[_cardOnFileSwitch isOn] initiatedBy:[_initiatedByBtn currentTitle] agreementId: @"someString" agreementType: @"someString"];
///
/// GDAddress *shippingAddress = [[GDAddress alloc] initWithCountryCode:NSString *shippingCountryCode andCity:_shippingCityTF.text andStreet:_shippingStreetTF.text andPostCode:_shippingPostCodeTF.text];
///
/// GDAddress *billingAddress = [[GDAddress alloc] initWithCountryCode:_billingCountryCodeTF.text andCity:_billingCityTF.text andStreet:_billingStreetTF.text andPostCode:_billingPostCodeTF.text];
///
/// GDCustomerDetails *customerDetails = [[GDCustomerDetails alloc] initWithEmail:_emailTF.text andCallbackUrl:_callbackUrlTF.text merchantReferenceId:_merchantRefIDTF.text shippingAddress:shippingAddress billingAddress:billingAddress paymentOperation: PaymentOperationPay];
///
/// [GeideaPaymentAPI payWithTokenWithTheAmount:amount withTokenId:@"token id from from pay API call response" tokenizationDetails:tokenizationDetails andpaymentIntentIdId: (paymentIntentIdId or null) andCustomerDetails:customerDetails navController: navVC completion:^(GDOrderResponse* order, GDErrorResponse* error) {
///
/// if (error != NULL) {
/// if (!error.errors || !error.errors.count) {
/// NSString *message;
/// if ( [error.responseCode length] == 0) {
/// message = [NSString stringWithFormat:@"\n responseMessage: %@", error.responseMessage];
/// } else {
/// message = [NSString stringWithFormat:@"\n responseCode: %@ \n responseMessage: %@ ", error.responseCode , error.responseMessage];
/// }
///
/// //TODO: display relevant fields from GDErrorResponse
/// } else {
/// //TODO: display relevant fields from GDErrorResponse
/// }
///
/// } else {
/// if (order != NULL) {
/// //TODO: display relevant fields from GDOrderResponse
/// //TODO: if paymentOperation is PaymentOperation.preAuthorize:
/// Save order id in persistence for capturing the payment with // GeideaPaymentApi.capture
/// if ([[order detailedStatus] isEqual: @"Authorized"]) {
/// TODO: save order.orderId
/// }
/// }
/// }
/// }];
///
/// \endcodeseealso:
/// GDAmount, GDTokenizationDetails, GDCustomerDetails, GDAddress, GDOrderResponse, GDErrorResponse
/// since:
/// 1.0
/// version:
/// 1.0
+ (void)payWithTokenWithTheAmount:(GDAmount * _Nonnull)amount withTokenId:(NSString * _Nonnull)token tokenizationDetails:(GDTokenizationDetails * _Nonnull)tokenizationDetails config:(GDConfigResponse * _Nullable)config showReceipt:(BOOL)showReceipt andPaymentIntentId:(NSString * _Nullable)paymentIntentId andCustomerDetails:(GDCustomerDetails * _Nullable)customerDetails navController:(UIViewController * _Nonnull)navController completion:(void (^ _Nonnull)(GDOrderResponse * _Nullable, GDErrorResponse * _Nullable))completion;
/// Capture  flow
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     orderId: String from GDOrderResponse  (response from GeideaPaymentAPI.pay or  GeideaPaymentAPI.payWithToken)  <em>Required</em>
///   </li>
///   <li>
///     navController: UIViewController - Used for presenting SDK Payment flow. <em>Required</em>
///   </li>
///   <li>
///     two options for starting the SDK:
///   </li>
///   <li>
///     self type of : (UIViewController) the SDK will present modally from customer app UIViewController
///   </li>
///   <li>
///     navigationController type of: UINavigationController  the SDK will be pushed from customer app NavigationCotroller
///   </li>
///   <li>
///     completion: (GDOrderResponse?, GDErrorResponse?)  -> Void - The completion handler for customer app returned from SDK <em>Required</em>
///   </li>
/// </ul>
/// <h1>Examples</h1>
/// Starting the payment flow
/// \code
/// guard let navVC = UIApplication.shared.keyWindow?.rootViewController as? UINavigationController  else {
/// return
/// }
///
/// GeideaPaymentAPI.capture(with: orderId, navController: **navVC** or **self**, completion:{ response, error in
/// DispatchQueue.main.async {
///
/// if let err = error {
/// if err.errors.isEmpty {
/// var message = ""
/// if err.responseCode.isEmpty {
/// message = "\n responseMessage: \(err.responseMessage)"
/// } else {
/// message = "\n responseCode: \(err.responseCode)  \n responseMessage: \(err.responseMessage)"
/// }
/// //TODO: display relevant fields from GDErrorResponse
/// } else {
/// //TODO: display relevant fields from GDErrorResponse
/// }
/// } else {
/// guard let orderResponse = response else {
/// return
/// }
///
/// //TODO: display relevant fields from GDOrderResponse
/// //TODO: remove OrderId and Capture button from UI
/// }
/// }
/// })
///
/// \endcode\code
/// UINavigationController *navVC =  (UINavigationController *)[[[UIApplication sharedApplication] keyWindow] rootViewController];
///
/// [GeideaPaymentAPI captureWith:self.orderId navController: navVC completion:^(GDOrderResponse* order, GDErrorResponse* error) {
///
/// if (error != NULL) {
/// if (!error.errors || !error.errors.count) {
/// NSString *message;
/// if ( [error.responseCode length] == 0) {
/// message = [NSString stringWithFormat:@"\n responseMessage: %@", error.responseMessage];
/// } else {
/// message = [NSString stringWithFormat:@"\n responseCode: %@ \n responseMessage: %@ ", error.responseCode , error.responseMessage];
/// }
///
/// //TODO: display relevant fields from GDErrorResponse
/// } else {
/// //TODO: display relevant fields from GDErrorResponse
/// }
///
/// } else {
/// if (order != NULL) {
/// //TODO: display relevant fields from GDOrderResponse
/// //TODO: remove OrderId and Capture button from UI
/// }
/// }
/// }
/// }];
///
/// \endcodeseealso:
/// GDOrderResponse, GDErrorResponse
/// since:
/// 1.0
/// version:
/// 1.0
+ (void)captureWith:(NSString * _Nonnull)orderId callbackUrl:(NSString * _Nullable)callbackUrl navController:(UIViewController * _Nonnull)navController completion:(void (^ _Nonnull)(GDOrderResponse * _Nullable, GDErrorResponse * _Nullable))completion;
/// Refund  flow
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     orderId: String from GDOrderResponse  (response from GeideaPaymentAPI.pay or  GeideaPaymentAPI.payWithToken)orGeideaPaymentAPI.setupApplePay  <em>Required</em>
///   </li>
///   <li>
///     navController: UIViewController - Used for presenting SDK Payment flow. <em>Required</em>
///   </li>
///   <li>
///     two options for starting the SDK:
///   </li>
///   <li>
///     self type of : (UIViewController) the SDK will present modally from customer app UIViewController
///   </li>
///   <li>
///     navigationController type of: UINavigationController  the SDK will be pushed from customer app NavigationCotroller
///   </li>
///   <li>
///     completion: (GDOrderResponse?, GDErrorResponse?)  -> Void - The completion handler for customer app returned from SDK <em>Required</em>
///   </li>
/// </ul>
/// <h1>Examples</h1>
/// Starting the refund flow
/// \code
/// guard let navVC = UIApplication.shared.keyWindow?.rootViewController as? UINavigationController  else {
/// return
/// }
///
/// GeideaPaymentAPI.refund(with: orderId, navController: **navVC** or **self**, completion:{ response, error in
/// DispatchQueue.main.async {
///
/// if let err = error {
/// if err.errors.isEmpty {
/// var message = ""
/// if err.responseCode.isEmpty {
/// message = "\n responseMessage: \(err.responseMessage)"
/// } else {
/// message = "\n responseCode: \(err.responseCode)  \n responseMessage: \(err.responseMessage)"
/// }
/// //TODO: display relevant fields from GDErrorResponse
/// } else {
/// //TODO: display relevant fields from GDErrorResponse
/// }
/// } else {
/// guard let orderResponse = response else {
/// return
/// }
///
/// //TODO: display relevant fields from GDOrderResponse
/// //TODO: remove OrderId and Refund button from UI
/// }
/// }
/// })
///
/// \endcode\code
/// UINavigationController *navVC =  (UINavigationController *)[[[UIApplication sharedApplication] keyWindow] rootViewController];
///
/// [GeideaPaymentAPI refundWith:self.orderId navController: navVC completion:^(GDOrderResponse* order, GDErrorResponse* error) {
///
/// if (error != NULL) {
/// if (!error.errors || !error.errors.count) {
/// NSString *message;
/// if ( [error.responseCode length] == 0) {
/// message = [NSString stringWithFormat:@"\n responseMessage: %@", error.responseMessage];
/// } else {
/// message = [NSString stringWithFormat:@"\n responseCode: %@ \n responseMessage: %@ ", error.responseCode , error.responseMessage];
/// }
///
/// //TODO: display relevant fields from GDErrorResponse
/// } else {
/// //TODO: display relevant fields from GDErrorResponse
/// }
///
/// } else {
/// if (order != NULL) {
/// //TODO: display relevant fields from GDOrderResponse
/// //TODO: remove OrderId and Refund button from UI
/// }
/// }
/// }
/// }];
///
/// \endcodeseealso:
/// GDOrderResponse, GDErrorResponse
/// since:
/// 1.0
/// version:
/// 10
+ (void)refundWith:(NSString * _Nonnull)orderId callbackUrl:(NSString * _Nullable)callbackUrl navController:(UIViewController * _Nonnull)navController completion:(void (^ _Nonnull)(GDOrderResponse * _Nullable, GDErrorResponse * _Nullable))completion;
/// Starting getQRImage  flow
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     amount: GDAmount - SDK GDAmount object  <em>Required</em>
///     amount: Double <em>Required</em>
///     currency: String <em>Required</em>
///   </li>
///   <li>
///     customer: GDPaymentIntentCustomer  <em>Required</em>
///   </li>
///   <li>
///     expiryDate: Date <em>Required</em>
///   </li>
///   <li>
///     merchantPublicKey: String <em>Required</em>
///   </li>
///   <li>
///     showReceipt: Bool <em>Optional</em> true if you want to show Geidea receipt screen
///   </li>
///   <li>
///     navController: UIViewController - Used for presenting SDK Payment flow. <em>Required</em>
///     self type of : (UIViewController) the SDK will present modally from customer app UIViewController
///   </li>
///   <li>
///     completion: (GDOrderResponse?, GDErrorResponse?)  -> Void - The completion handler for customer app returned from SDK <em>Required</em>
///   </li>
/// </ul>
/// <h1>Examples</h1>
/// Starting the pay QR with Geidea form
/// \code
/// let amount = GDAmount(amount: Double, currency: String)
///
///
/// GeideaPaymentAPI.getQRImage(theAmount: amount, customer: GDPaymentIntentCustomer, expiryDate: Date, showReceipt: Bool, merchantName: String, navController: self, completion:{ response, error in
/// DispatchQueue.main.async {
///
/// if let err = error {
/// if err.errors.isEmpty {
/// var message = ""
/// if err.responseCode.isEmpty {
/// message = "\n responseMessage: \(err.responseMessage)"
/// } else {
/// message = "\n responseCode: \(err.responseCode)  \n responseMessage: \(err.responseMessage)"
/// }
/// //TODO: display relevant fields from GDErrorResponse
/// } else {
/// //TODO: display relevant fields from GDErrorResponse
/// }
///
/// } else {
/// guard let orderResponse = response else {
/// return
/// }
///
/// //TODO: display relevant fields from GDOrderResponse
/// //TODO: if cardOnFile is true save tokenId from GDOrderResponse in persistence and also agreementId and agreementType for subscriptions
/// //TODO: if paymentOperation is PaymentOperation.preAuthorize:
/// // Save order id in persistence for capturing the payment with // GeideaPaymentApi.capture
/// // if orderResponse.detailedStatus == "Authorized" {
/// // TODO: save order.orderId
/// // }
/// }
/// }
/// })
///
/// \endcode\code
/// UINavigationController *navVC =  (UINavigationController *)[[[UIApplication sharedApplication] keyWindow] rootViewController];
///
/// GDAmount *amount = [[GDAmount alloc] initWithAmount: [amount doubleValue] currency: NSString *curency];
///
///
///
/// [GeideaPaymentAPI getQRImage:amount customer:GDPaymentIntentCustomer expiryDate:Date, showReceipt:true merchantName:String navController: **self** completion:^(GDOrderResponse* order, GDErrorResponse* error) {
///
/// if (error != NULL) {
/// if (!error.errors || !error.errors.count) {
/// NSString *message;
/// if ( [error.responseCode length] == 0) {
/// message = [NSString stringWithFormat:@"\n responseMessage: %@", error.responseMessage];
/// } else {
/// message = [NSString stringWithFormat:@"\n responseCode: %@ \n responseMessage: %@ ", error.responseCode , error.responseMessage];
/// }
///
/// //TODO: display relevant fields from GDErrorResponse
/// } else {
/// //TODO: display relevant fields from GDErrorResponse
/// }
///
/// } else {
/// if (order != NULL) {
/// //TODO: display relevant fields from GDOrderResponse
/// //TODO: if cardOnFile is true save tokenId from GDOrderResponse in persistence and also agreementId and agreementType for subscriptions (InitistedBy = "Merchant")
/// // TODO: check  [order tokenId] != NULL
/// //TODO: if paymentOperation is PaymentOperation.preAuthorize:
/// Save order id in persistence for capturing the payment with // GeideaPaymentApi.capture
/// if ([[order detailedStatus] isEqual: @"Authorized"]) {
/// TODO: save order.orderId
/// }
/// }
/// }
/// }];
///
/// \endcodeseealso:
/// GDAmount, GDApplePayDetails, GDTokenizationDetails,GDConfigResponse,  GDCustomerDetails, GDAddress, GDOrderResponse, GDErrorResponse, GDApplePayResponse
/// since:
/// 1.0
/// version:
/// 1.0
+ (void)getQRImageWith:(GDAmount * _Nonnull)amount qrDetails:(GDQRDetails * _Nullable)qrDetails merchantName:(NSString * _Nonnull)merchantName orderId:(NSString * _Nullable)orderId callbackUrl:(NSString * _Nullable)callbackUrl completion:(void (^ _Nonnull)(GDQRResponse * _Nullable, GDErrorResponse * _Nullable))completion;
+ (void)requestToPayWithQRCodeMessage:(NSString * _Nonnull)message phoneNumber:(NSString * _Nonnull)phoneNumber orderId:(NSString * _Nullable)orderId completion:(void (^ _Nonnull)(GDRTPQRResponse * _Nullable, GDErrorResponse * _Nullable))completion;
+ (NSTimer * _Nonnull)checkPaymentIntentStatusWith:(NSString * _Nonnull)paymentIntentId atEverySeconds:(NSInteger)seconds forMinutes:(NSInteger)minutes completion:(void (^ _Nonnull)(GDOrderResponse * _Nullable, GDErrorResponse * _Nullable))completion SWIFT_WARN_UNUSED_RESULT;
+ (void)cancelWith:(NSString * _Nonnull)orderId callbackUrl:(NSString * _Nullable)callbackUrl navController:(UIViewController * _Nonnull)navController completion:(void (^ _Nonnull)(GDCancelResponse * _Nullable, GDErrorResponse * _Nullable))completion;
/// Starting the apple pay with flow
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     applePayDetails:GDApplePayDetails
///   </li>
///   <li>
///     hostViewController: your host ViewController
///   </li>
///   <li>
///     merchantIdentifier: String <em>Required</em> “merchant identifier from Apple account.”
///   </li>
///   <li>
///     buttonView: UIView as a placeholder where apple Pay Button will be placed <em>Optional</em>
///   </li>
///   <li>
///     merchantRefId String <em>Optional</em>
///   </li>
///   <li>
///     callbackUrl: String <em>Optional</em>
///   </li>
///   <li>
///     amount: GDAmount - SDK GDAmount object  <em>Required</em>
///   </li>
///   <li>
///     amount: Double <em>Required</em>
///   </li>
///   <li>
///     currency: String <em>Required</em>
///   </li>
///   <li>
///     completion: (GDApplePayResponse?, GDErrorResponse?)  -> Void - The completion handler for customer app returned from SDK <em>Required</em>
///   </li>
/// </ul>
/// <h1>Examples</h1>
/// \code
/// let amount = GDAmount(amount: safeAmount, currency: safeCurrency)
/// let applePayDetails = GDApplePayDetails(in: self, andButtonIn: applePayBtnView, forMerchantIdentifier: "merchant.company. etc.", withCallbackUrl: String, andReferenceId: String)
///
/// GeideaPaymentAPI.setupApplePay(forApplePayDetails: applePayDetails, with: amount, config: merchantConfig, completion: { response, error in
/// DispatchQueue.main.async {
///
/// if let err = error {
/// if err.errors.isEmpty {
/// var message = ""
/// if err.responseCode.isEmpty {
/// message = "\n responseMessage: \(err.responseMessage)"
/// } else {
/// message = "\n responseCode: \(err.responseCode)  \n responseMessage: \(err.responseMessage)"
/// }
/// //TODO: display relevant fields from GDErrorResponse
/// } else {
/// //TODO: display relevant fields from GDErrorResponse
/// }
///
/// } else {
/// guard let orderResponse = response else {
/// return
/// }
///
/// //TODO: display relevant fields from GDApplePayResponse
/// }
/// }
/// })
///
/// \endcode\code
///
/// GDAmount *amount = [[GDAmount alloc] initWithAmount: [amount doubleValue] currency: NSString *curency];
///
/// GDApplePayDetails *applePayDetails = [[GDApplePayDetails alloc] initIn:self andButtonIn:_applePayBtnView forMerchantIdentifier:@"merchant.etc" withCallbackUrl:String andReferenceId:String];
///
/// [GeideaPaymentAPI setupApplePayForApplePayDetails:applePayDetails with:amount config:GDConfigResponse completion:^(GDApplePayResponse* response, GDErrorResponse* error) {
///
/// if (error != NULL) {
/// if (!error.errors || !error.errors.count) {
/// NSString *message;
/// if ( [error.responseCode length] == 0) {
/// message = [NSString stringWithFormat:@"\n responseMessage: %@", error.responseMessage];
/// } else {
/// message = [NSString stringWithFormat:@"\n responseCode: %@ \n responseMessage: %@ ", error.responseCode , error.responseMessage];
/// }
///
/// //TODO: display relevant fields from GDErrorResponse
/// } else {
/// //TODO: display relevant fields from GDErrorResponse
/// }
///
/// } else {
/// if (response != NULL) {
/// //TODO: display relevant fields from GDApplePayResponse
/// }
/// }
/// }];
///
/// \endcodeseealso:
/// GDAmount, GDApplePayDetails, GDConfigResponse, GDApplePayResponse, GDErrorResponse
/// since:
/// 1.0
/// version:
/// 1.0
+ (void)setupApplePayForApplePayDetails:(GDApplePayDetails * _Nonnull)applePayDetails with:(GDAmount * _Nonnull)amount config:(GDConfigResponse * _Nullable)config completion:(void (^ _Nonnull)(GDOrderResponse * _Nullable, GDErrorResponse * _Nullable))completion;
/// Getting card scheme logo
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     cardType: CardType  <em>Required</em>
///   </li>
/// </ul>
/// <h1>Examples</h1>
/// getting the image
/// \code
/// cardSchemeLogoIV.image = GeideaPaymentAPI.getCardSchemeLogo(withCardNumber: cardNumber)
///
/// or if you don't want detector
///
/// cardSchemeLogoIV.image = GeideaPaymentAPI.getCardSchemeLogo(withCardType: cardType)
///
/// \endcode\code
///
/// _cardSchemeLogoIV.image = [GeideaPaymentAPI getCardSchemeLogoWithCardNumber:cardNumber];
///
/// or if you don't want detector
///
/// _cardSchemeLogoIV.image  = [GeideaPaymentAPI getCardSchemeLogoWithCardType:CardTypeVisa]
///
/// \endcodesince:
/// 1.0
/// version:
/// 1.0
+ (UIImage * _Nullable)getCardSchemeLogoWithCardType:(enum CardType)cardType SWIFT_WARN_UNUSED_RESULT;
+ (UIImage * _Nullable)getCardSchemeLogoWithCardNumber:(NSString * _Nullable)cardNumber SWIFT_WARN_UNUSED_RESULT;
/// Create PaymentIntent
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     paymentIntentParams: GDPaymentIntentDetails  <em>Required</em>
///   </li>
/// </ul>
/// <h1>Examples</h1>
/// creating the PaymentIntent
/// \code
/// GeideaPaymentAPI.createPaymentIntent(with: paymentIntentParams, completion:{ response, error in
/// if let paymentIntent = response?.paymentIntentId {
/// // save paymentIntentId for future payment
/// }
///
/// })
///
/// \endcode\code
/// [GeideaPaymentAPI createPaymentIntentWith:paymentIntentParams completion:^(GDPaymentIntentResponse* order, GDErrorResponse* error) {
/// //Use response
/// }];
///
/// \endcodeseealso:
/// GDAmount, GDPaymentIntentDetails
/// since:
/// 1.0
/// version:
/// 1.0
+ (void)createPaymentIntentWith:(GDPaymentIntentDetails * _Nonnull)paymentIntentParams completion:(void (^ _Nonnull)(GDPaymentIntentResponse * _Nullable, GDErrorResponse * _Nullable))completion;
+ (void)sendLinkBySMSWith:(NSString * _Nonnull)paymentIntentId completion:(void (^ _Nonnull)(GDPaymentIntentResponse * _Nullable, GDErrorResponse * _Nullable))completion;
+ (void)sendLinkByEmailWith:(NSString * _Nonnull)paymentIntentId completion:(void (^ _Nonnull)(GDPaymentIntentResponse * _Nullable, GDErrorResponse * _Nullable))completion;
+ (void)sendLinkByMultipleWith:(GDSendLinkMultipleDetails * _Nonnull)sendLinkMultipleDetails completion:(void (^ _Nonnull)(GDPaymentIntentResponse * _Nullable, GDErrorResponse * _Nullable))completion;
/// Update PaymentIntent
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     paymentIntentParams: GDPaymentIntentDetails  <em>Required</em>
///   </li>
/// </ul>
/// <h1>Examples</h1>
/// updating  updatePaymentIntent
/// \code
/// GeideaPaymentAPI.updatePaymentWith(with: paymentIntentParams, completion:{ response, error in
/// //Use response
/// })
/// })
///
/// \endcode\code
/// [GeideaPaymentAPI updatePaymentWith:paymentIntentParams completion:^(GDPaymentIntentResponse* order, GDErrorResponse* error) {
/// //Use response
/// }];
///
/// \endcodeseealso:
/// GDAmount, GDPaymentIntentDetails
/// since:
/// 1.0
/// version:
/// 1.0
+ (void)updatePaymentIntentWith:(GDPaymentIntentDetails * _Nonnull)paymentIntentParams completion:(void (^ _Nonnull)(GDPaymentIntentResponse * _Nullable, GDErrorResponse * _Nullable))completion;
/// Get getPaymentIntents
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     paymentIntentsParams: String  <em>Required</em>
///   </li>
/// </ul>
/// <h1>Examples</h1>
/// getting  getPaymentIntents
/// \code
/// GeideaPaymentAPI.getPaymentIntents(with: paymentIntentsParams, completion:{ response, error in
/// //Use response
/// })
/// })
///
/// \endcode\code
/// [GeideaPaymentAPI getPaymentIntentsWith:paymentIntentsParams completion:^(GDPaymentIntentResponse* response, GDErrorResponse* error) {
/// //Use response
/// }];
///
/// \endcodeseealso:
/// GDAmount, GDPaymentIntentFilter
/// since:
/// 1.0
/// version:
/// 1.0
+ (void)getPaymentIntentsWith:(GDPaymentIntentFilter * _Nonnull)paymentIntentsParams completion:(void (^ _Nonnull)(GDPaymentIntentsResponse * _Nullable, GDErrorResponse * _Nullable))completion;
/// Get GetPaymentIntent
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     paymentIntentId: String  <em>Required</em>
///   </li>
/// </ul>
/// <h1>Examples</h1>
/// getting  PaymentIntent
/// \code
/// GeideaPaymentAPI.getPaymentIntent(with: paymentIntentId, completion:{ response, error in
/// //Use response
/// })
/// })
///
/// \endcode\code
/// [GeideaPaymentAPI getPaymentIntentWith:paymentIntentId completion:^(GDPaymentIntentResponse* response, GDErrorResponse* error) {
/// //Use response
/// }];
///
/// \endcodesince:
/// 1.0
/// version:
/// 1.0
+ (void)getPaymentIntentWith:(NSString * _Nonnull)paymentIntentId completion:(void (^ _Nonnull)(GDPaymentIntentResponse * _Nullable, GDErrorResponse * _Nullable))completion;
/// Delete PaymentIntent
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     paymentIntentIdId: String  <em>Required</em>
///   </li>
/// </ul>
/// <h1>Examples</h1>
/// deleting  PaymentIntent
/// \code
/// GeideaPaymentAPI.deletePaymentIntent(with: paymentIntentId, completion:{ response, error in
/// //Use response
/// })
/// })
///
/// \endcode\code
/// [GeideaPaymentAPI deletePaymentIntenteWith:paymentIntentId completion:^(GDPaymentIntentResponse*   response, GDErrorResponse* error) {
/// //Use response
/// }];
///
/// \endcodesince:
/// 1.0
/// version:
/// 1.0
+ (void)deletePaymentIntentWith:(NSString * _Nonnull)paymentIntentId completion:(void (^ _Nonnull)(GDPaymentIntentResponse * _Nullable, GDErrorResponse * _Nullable))completion;
+ (void)getOrdersWith:(GDOrdersFilter * _Nullable)orderParams completion:(void (^ _Nonnull)(GDOrdersResponse * _Nullable, GDErrorResponse * _Nullable))completion;
+ (void)getOrderWith:(NSString * _Nonnull)orderId completion:(void (^ _Nonnull)(GDOrderResponse * _Nullable, GDErrorResponse * _Nullable))completion;
+ (void)getMerchantConfigWithCompletion:(void (^ _Nonnull)(GDConfigResponse * _Nullable, GDErrorResponse * _Nullable))completion;
+ (void)getMerchantConfigWith:(GDSDKMerchantConfig * _Nullable)productConfig completion:(void (^ _Nonnull)(NSArray<GDSDKMerchantConfigResponse *> * _Nullable, GDErrorResponse * _Nullable))completion;
/// Switch networking environment for testing purposes
/// <h1>Examples</h1>
/// Add this to check if credentials are already stored in the SDK Secure storage
/// \code
/// GeideaPaymentAPI.setEnvironment(environment: Environment.dev)
/// GeideaPaymentAPI.setEnvironment(environment: Environment.test)
/// GeideaPaymentAPI.setEnvironment(environment: Environment.preprod)
/// GeideaPaymentAPI.setEnvironment(environment: Environment.prod)
///
/// \endcode\code
/// [GeideaPaymentAPI setEnvironmentWithEnvironment:EnvironmentDev];
/// [GeideaPaymentAPI setEnvironmentWithEnvironment:EnvironmentTest];
/// [GeideaPaymentAPI setEnvironmentWithEnvironment:EnvironmentPreprod];
/// [GeideaPaymentAPI setEnvironmentWithEnvironment:EnvironmentProd];
///
/// \endcodesince:
/// 1.0
/// version:
/// 1.0
+ (void)setEnvironmentWithEnvironment:(enum Environment)environment;
/// Set language
/// <h1>Examples</h1>
/// Add this to check if credentials are already stored in the SDK Secure storage
/// \code
/// GeideaPaymentAPI.setlanguage(language: Language.english)
/// GeideaPaymentAPI.setlanguage(language: Language.arabic)
///
/// \endcode\code
/// [GeideaPaymentAPI setLanguageWithLanguageLanguageEnglish];
/// [GeideaPaymentAPI setLanguageWithLanguageLanguageArabic];
///
/// \endcodesince:
/// 1.0
/// version:
/// 1.0
+ (void)setlanguageWithLanguage:(enum Language)language;
+ (void)removeCredentials;
+ (void)updateCredentialsWithMerchantKey:(NSString * _Nonnull)merchantKey andPassword:(NSString * _Nonnull)password;
+ (void)startPaymentIntentWithPaymentIntentID:(NSString * _Nullable)paymentIntentId status:(NSString * _Nullable)status type:(NSString * _Nonnull)type currency:(NSString * _Nullable)currency viewController:(UIViewController * _Nonnull)viewController completion:(void (^ _Nonnull)(GDPaymentIntentResponse * _Nullable, GDErrorResponse * _Nullable))completion;
+ (void)payWithApplePayWithPKPayment:(PKPayment * _Nonnull)pkPayment callbackUrl:(NSString * _Nullable)callbackUrl merchentRefId:(NSString * _Nullable)merchentRefId completion:(void (^ _Nonnull)(GDOrderResponse * _Nullable, GDErrorResponse * _Nullable))completion;
+ (NSString * _Nullable)getModelStringWithOrder:(GDOrderResponse * _Nonnull)order SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nullable)getQRPaymentStringWithOrder:(GDRTPQRResponse * _Nonnull)order SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nullable)getConfigStringWithConfig:(GDConfigResponse * _Nonnull)config SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nullable)getMMSConfigWithOrder:(GDPaymentIntentResponse * _Nonnull)order SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nullable)getPaymentIntentStringWithOrder:(GDPaymentIntentResponse * _Nonnull)order SWIFT_WARN_UNUSED_RESULT;
@end


typedef SWIFT_ENUM(NSInteger, KDCircularProgressGlowMode, open) {
  KDCircularProgressGlowModeForward = 0,
  KDCircularProgressGlowModeReverse = 1,
  KDCircularProgressGlowModeConstant = 2,
  KDCircularProgressGlowModeNoGlow = 3,
};

typedef SWIFT_ENUM(NSInteger, Language, open) {
  LanguageEnglish = 0,
  LanguageArabic = 1,
};

typedef SWIFT_ENUM(NSInteger, LogLevel, open) {
/// No log will be shown. Recommended for production environments.
  LogLevelNone = 0,
/// Only warnings and errors. Recommended for develop environments.
  LogLevelError = 1,
/// Errors and relevant information. Recommended for test integrating.
  LogLevelInfo = 2,
/// Request and Responses to GeideaPaymentSDK’s server will be displayed. Not recommended to use, only for debugging.
  LogLevelDebug = 3,
};




SWIFT_CLASS("_TtC16GeideaPaymentSDK11PayResponse")
@interface PayResponse : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, PaymentOperation, open) {
  PaymentOperationPay = 0,
  PaymentOperationPreAuthorize = 1,
  PaymentOperationAuthorizeCapture = 2,
  PaymentOperationNONE = 3,
};

typedef SWIFT_ENUM(NSInteger, PaymentType, open) {
  PaymentTypeCard = 0,
  PaymentTypeQR = 1,
  PaymentTypeValU = 2,
  PaymentTypeShahry = 3,
  PaymentTypeSouhoola = 4,
  PaymentTypeBNPLGroup = 5,
};

@class UIColor;
@class NSCoder;
@class CAAnimation;

IB_DESIGNABLE
SWIFT_CLASS("_TtC16GeideaPaymentSDK12ProgressView")
@interface ProgressView : UIView <CAAnimationDelegate>
@property (nonatomic) double progress;
@property (nonatomic) IBInspectable double angle;
@property (nonatomic) IBInspectable double startAngle;
@property (nonatomic) IBInspectable BOOL clockwise;
@property (nonatomic) IBInspectable BOOL roundedCorners;
@property (nonatomic) IBInspectable BOOL lerpColorMode;
@property (nonatomic) IBInspectable CGFloat gradientRotateSpeed;
@property (nonatomic) IBInspectable CGFloat glowAmount;
@property (nonatomic) enum KDCircularProgressGlowMode glowMode;
@property (nonatomic) IBInspectable CGFloat progressThickness;
@property (nonatomic) IBInspectable CGFloat trackThickness;
@property (nonatomic, strong) IBInspectable UIColor * _Nonnull trackColor;
@property (nonatomic, strong) IBInspectable UIColor * _Nullable progressInsideFillColor;
@property (nonatomic, copy) NSArray<UIColor *> * _Nonnull progressColors;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)refresh;
- (void)awakeFromNib;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) Class _Nonnull layerClass;)
+ (Class _Nonnull)layerClass SWIFT_WARN_UNUSED_RESULT;
- (void)layoutSubviews;
- (void)fillAsView;
- (void)animateFromAngle:(double)fromAngle toAngle:(double)toAngle duration:(NSTimeInterval)duration relativeDuration:(BOOL)relativeDuration completion:(void (^ _Nullable)(BOOL))completion;
- (void)animateToAngle:(double)toAngle duration:(NSTimeInterval)duration relativeDuration:(BOOL)relativeDuration completion:(void (^ _Nullable)(BOOL))completion;
- (void)pauseAnimation;
- (void)stopAnimation;
- (BOOL)isAnimating SWIFT_WARN_UNUSED_RESULT;
- (void)animationDidStop:(CAAnimation * _Nonnull)anim finished:(BOOL)flag;
- (void)didMoveToWindow;
- (void)willMoveToSuperview:(UIView * _Nullable)newSuperview;
- (void)prepareForInterfaceBuilder;
@end









@interface UITextField (SWIFT_EXTENSION(GeideaPaymentSDK))
- (void)awakeFromNib;
@end






#endif
#if defined(__cplusplus)
#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#else
#error unsupported Swift architecture
#endif
